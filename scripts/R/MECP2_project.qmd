---
title: "Methylation independent gene regulation by methyl-CpG binding protein 2"
author:
  - name: Gyan Prakash Mishra
    email: j12mishra@gmail.com
    affiliations:
      - name: Department of Neuroscience, Peter O’Donnell Jr. Brain Institute, 
      - name: UT Southwestern Medical Center
      - address: 5323 Harry Hines Boulevard
      - city: Dallas
      - state: Texas
      - postal-code: 75390
#  - name: Eric Sun
#    email:
#    affiliations:
#      - name: Department of Neuroscience, Peter O’Donnell Jr. Brain Institute,
#      - name: UT Southwestern Medical Center
#        address: 5323 Harry Hines Boulevard
#        city: Dallas
#        state: Texas
#        postal-code: 75390
#  - name: Michael E. Greenberg
#    email: xyz@gmail.com
#    affiliations:
#      - name: Department of Neurobiology, Harvard Medical School
#        address: 220 Longwood Avenue
#        city: Boston
#        state: MA
#        postal-code: 02115
#  - name: Hume Stroud
#    corresponding: true
#    email:
#    affiliations:
#      - name: Department of Neuroscience, Peter O’Donnell Jr. Brain Institute,
#      - name: UT Southwestern Medical Center
#        address: 5323 Harry Hines Boulevard
#        city: Dallas
#        state: Texas
#        postal-code: 75390
format:
  html:
    page-layout: full
    code-fold: true
    toc: true
    toc-depth: 3
    toc-location: left
editor: visual
knitr: 
  opts_chunk: 
    root.dir: "/work/OBI/Neuroinformatics_Core/s225347/Mecp2_project/"
---

### Introduction

\
This document encapsulates the R code employed for the comprehensive quantitative, integrative, and statistical analysis of the datasets outlined in the study.

|            |                                                                      |                                                                                                           |
|------------------|------------------------------------|------------------|
| **SI. No** | **Sequencing data type**                                             | **Source**                                                                                                |
| 1\.        | MECP2 CUT&RUN (Adult Brain Cortex of *Mecp2* WT and KO mice)         | [GSE150538](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE150538)                                 |
| 2\.        | MECP2 CUT&RUN (Adult hippocampus of *MECP2*-TG1, *Mecp2* KO, and WT) | [GSE213752](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE213752)                                 |
| 3.         | MECP2 ChIP-seq                                                       | [GSE67293](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE67293)                                   |
| 4.         | MECP2 ChIP-seq                                                       | [GSE139509](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE139509)                                 |
| 5\.        | BS-seq (Brain Cortex of 10 week old DNMT3a cKO and WT mice)          | [GSE103214](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE103214)                                 |
| 6\.        | MECP2 CUT&RUN ( WT and G118E )                                       | [GSE243009](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi)                                               |
| 7\.        | RNA-seq (Supplementary Table S1)                                     | [Boxer et. al, 2020](https://www.sciencedirect.com/science/article/pii/S109727651930810X?via%3Dihub#app2) |
| 8\.        | snRNA-seq (Supplementary Table S7)                                   | [Renthal et. al, 2018](https://www.nature.com/articles/s41593-018-0270-6#citeas)                          |

### Load Libraries

```{r, setup, message=FALSE, warning=FALSE, include=TRUE}
knitr::opts_knit$set(root.dir = "/work/OBI/Neuroinformatics_Core/s225347/Mecp2_project/")

suppressPackageStartupMessages({
library(data.table)
library(ChIPseeker)
library(openxlsx)
library(reshape2)
library(ggpubr)
library(ggExtra)
library(MASS)
library(scales)
library(regioneR)
library(plyranges)
library(AnnotationHub)
library(Rsamtools)
library(Rsubread)
library(DESeq2)
library(edgeR)
library(ggpointdensity)
library(viridis)
library(methylKit)
library(EnrichedHeatmap)
library(circlize)
library(RColorBrewer)
library(org.Mm.eg.db)
library(BSgenome)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(BSgenome.Mmusculus.UCSC.mm10)
library(Repitools)
library(gridExtra)
library(seqLogo)
library(universalmotif) 
library(MotifDb) 
library(memes)
library(BRGenomics)
library(rtracklayer)
library(GenometriCorr)
library(parallel)
library(tidyverse)
library(GeneOverlap)
library(ggvenn)
txdb = TxDb.Mmusculus.UCSC.mm10.knownGene
})
```

```{r,evl=FALSE, echo=TRUE,include=TRUE}
path = getwd()
dir.create(file.path(paste0(path,"/results")), showWarnings = FALSE)
dir.create(file.path(paste0(path,"/results/RData")), showWarnings = FALSE)
dir.create(file.path(paste0(path,"/Plots")), showWarnings = FALSE)
#dir.create(file.path(paste0(path,"/Plots")), showWarnings = FALSE)
```

```{r}
print(path)
```

### Data processing

1.  **MECP2 peak processing**

    ```{r,echo=TRUE,eval=FALSE}

    dir.create(file.path(paste0(path,"/results/MECP2")), showWarnings = FALSE)

    # read tag count output from annotatepeaks.pl 
    MECP2_tagCount.bed = read.csv(
      "results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_tagCount.tsv",
       sep="\t",header=T) 
    #head(MECP2_tagCount.bed)
    colnames(MECP2_tagCount.bed)[1] = 'PeakID'
    MECP2_tagCount = MECP2_tagCount.bed %>% dplyr::select(1,20:23) 
    colnames(MECP2_tagCount)[1] = "PeakID"
    colnames(MECP2_tagCount) = gsub('……CUT_and_RUN.results.|_CNR_.*','',
                                    colnames(MECP2_tagCount))

    # After looking at the peak height in IGV, 
    # we decided to filter the peaks whose average tag count is below 20 across the 
    # wild type samples
    MECP2_tagCount.filtered = MECP2_tagCount %>% dplyr::filter(rowMeans(.[,c(2,3,4,5)]) >20) 

    MECP2_tagCount.filtered.bed  = MECP2_tagCount.bed %>% select(2,3,4,1) %>% 
      filter(PeakID %in% MECP2_tagCount.filtered$PeakID) 

    print(paste0("Total number of filtered MECP2 peaks = ",dim(MECP2_tagCount.filtered.bed)[1]))

    write.table(MECP2_tagCount.filtered.bed,
                  file="results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_filtered.bed",
                  sep='\t',
                  quote = F,
                  col.names = F,
                  row.names = F)


    saveRDS(MECP2_tagCount.filtered.bed,
            file="results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_filtered.rds")
    ```

2.  **Peak annotation of MECP2**

    **Figure 3A**

    ```{r,eval=FALSE,message=FALSE,results=FALSE}

    # Read MECP2 Binding peaks
    mecp2  = paste0("results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_filtered.bed")
    peak = readPeakFile(mecp2)
    peakAnno.mecp2 = annotatePeak(mecp2, 
                                   tssRegion=c(-1000, 1000),
                                   TxDb=txdb, annoDb="org.Mm.eg.db")
    # plot peak distribution 
    plotAnnoPie(peakAnno.mecp2)

    mecp2.binding = as.data.frame(peakAnno.mecp2)

    #save RData of MECP2 annotation
    save(mecp2.binding,
         file= "results/RData/MECP2_peakAnnotation.RData")
    ```

3.  **Read bisulfite sequencing (BS-seq) data from 8week old mice cortex**

    ```{r,echo=TRUE,eval=FALSE}

    source("scripts/R/readBismarkFiles.R")

    # Read CG methylation BSmap file
    CG_methFiles = "data/8wk_CTX_Stroud2017_mm10_BSmap_CG.txt.gz"
    CTX_CG = readBismarkCoverage(CG_methFiles,sample.id = "CG",assembly="unknown",
                                 context="CG",min.cov=5)
    save(CTX_CG, file='results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_CG.RData')

    CTX_CG.df = getData(CTX_CG)
    CTX_CG.df$meth = CTX_CG.df$numCs/CTX_CG.df$coverage
    CTX_CG.df %>% dplyr::select(1,2,3,8) %>% 
      write.table('data/8wk_CTX_Stroud2017_mm10_BSmap_CG.cov5.bed',
                  sep='\t',col.names = FALSE,row.names = FALSE,quote = FALSE)

    # Read CA methylation BSmap file
    CA_methFiles = paste0(path,"data/8wk_CTX_Stroud2017_mm10_BSmap_CA.txt.gz")
    CTX_CA = readBismarkCoverage(CA_methFiles,sample.id = "CA",assembly="unknown",
                                 context="CA",min.cov=5)
    save(CTX_CA, file='results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_CA.RData')

    CTX_CA.df = getData(CTX_CA)
    CTX_CA.df$meth = CTX_CA.df$numCs/CTX_CA.df$coverage
    CTX_CA.df %>% dplyr::select(1,2,3,8) %>% 
      write.table('data/8wk_CTX_Stroud2017_mm10_BSmap_CA.cov5.bed',
                  sep='\t',col.names = FALSE,row.names = FALSE,quote = FALSE)

    ```

4.  **Read excel having list of Differentially expressed genes between following conditions.**

    -   MECP2 KO vs MECP2 WT (whole-cell, nuclear and Chromatin associated RNA-seq)
    -   DNMT3a KO vs DNMT3A WT
    -   R306C vs MECP2 WT (whole-cell, nuclear and Chromatin associated RNA-seq)

    ```{r,echo=TRUE,eval=FALSE}
    # Read RNA-seq data to extract DNMT3A KOvsWT analysis
    path = "data/Boxer_RNAseq_data.xlsx"
    sheets = openxlsx::getSheetNames(path)

    # print name of all the sheet
    sheets

    # open each sheet by name ans make a list 
    RNAseq.list = lapply(sheets, openxlsx::read.xlsx, xlsxFile=path,startRow=2)

    # name each element of the list
    names(RNAseq.list) = sheets
    names(RNAseq.list)
    # Convert Gene Symbol to ENSEMBL id 
    RNAseq.list = lapply(RNAseq.list, 
                         function(x) { mutate(x,ENSEMBL = mapIds(org.Mm.eg.db,
                                                                 keys=x$Gene, 
                                                                 column="ENSEMBL",
                                                                 keytype="SYMBOL",
                                                                 multiVals="first" ))})
    save(file = 'results/RData/Boxer_RNAseq_data.RData',RNAseq.list)
    ```

5.  **Calculate gene body CA methylation**

    ```{r,eval=FALSE, echo=TRUE}

    dir.create(file.path(paste0(path,"/results/BSMap")), showWarnings = FALSE)

    # Use BioMart to extract start and end location of ensembl genes 
    # the below code has been taken from https://davetang.org/muse/2012/04/27/learning-to-use-biomart/
    listMarts()
    ensembl = useMart("ensembl",
                      dataset="mmusculus_gene_ensembl",
                      host='https://nov2020.archive.ensembl.org/')
    listDatasets(ensembl)

    # building a query, requires filters, attributes and values
    # listFilters shows all firslte
    filters = listFilters(ensembl)
    attributes = listAttributes(ensembl)
    head(attributes)

    # the gene length for MECP2 unbound genes need to be extracted to filter gene < 4.5kb
    ensenbl_location = getBM(attributes=c('ensembl_gene_id',
                                          'chromosome_name',
                                          'start_position',
                                          'end_position','strand'),mart = ensembl) 
    save(file = 'results/RData/ENSEMBL.IDs_with_start_end.RData',ensenbl_location)

    head(ensenbl_location)

    #load("results/MECP2/MECP2.Rdata",verbose =TRUE)
    colnames(ensenbl_location) = c('ENSEMBL','chr','start','end','strand')
    ensenbl_location = ensenbl_location %>% distinct() %>% 
      filter(end-start >4500)
    ensenbl_location.chr1.19.XY = ensenbl_location %>% 
      filter(chr %in% c(1:19,'X','Y'))
    ensenbl_location.chr1.19.XY$chr = paste0('chr',ensenbl_location.chr1.19.XY$chr)

    #Remove first 3kb of gene 
    ensenbl_location.chr1.19.XY$start = ifelse(ensenbl_location.chr1.19.XY$strand == 1,
                                               ensenbl_location.chr1.19.XY$start+3000, 
                                               ensenbl_location.chr1.19.XY$end-3000)
                                               
    ensenbl_location.GR = GRanges(ensenbl_location.chr1.19.XY[,c(2,3,4,1)])

    # load CA methylation data
    load('results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_CA.RData',verbose = TRUE)

    ensenbl_location.GR_CA_meth = regionCounts(CTX_CA,ensenbl_location.GR)

    ensenbl_location.df_CA_meth = getData(ensenbl_location.GR_CA_meth)
    ensenbl_location.df_CA_meth$meth = ensenbl_location.df_CA_meth$numCs/ensenbl_location.df_CA_meth$coverage
    ensenbl_location.df_CA_meth$ID = paste0(ensenbl_location.df_CA_meth$chr,'_',
                                            ensenbl_location.df_CA_meth$start,'_',
                                            ensenbl_location.df_CA_meth$end)

    ensenbl_location.chr1.19.XY$ID = paste0(ensenbl_location.chr1.19.XY$chr,'_',
                                            ensenbl_location.chr1.19.XY$start,'_',
                                            ensenbl_location.chr1.19.XY$end)
    ensenbl_location.df_CA_meth = merge(ensenbl_location.df_CA_meth,
                                        ensenbl_location.chr1.19.XY,by='ID',all.x=TRUE) %>% 
                                        distinct() %>% 
                                        dplyr::select(10,11,12,13,14,6,7,8,9)
    colnames(ensenbl_location.df_CA_meth) = gsub('\\.y','',
                                                 colnames(ensenbl_location.df_CA_meth))

    save(ensenbl_location.df_CA_meth,
         file='results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_CA_within_mm10_ensembl_genes.First3kb_excluded.RData')

    ```

6.  **Integrate MECP2 peaks, DEGs (MECP2 KO vs WT), and gene body CA and CG methylation**

    ```{r,echo=TRUE,eval=FALSE}

    load('results/RData/Boxer_RNAseq_data.RData',verbose = TRUE)

    RNAseq_Mecp2KO = RNAseq.list[c(1,2,3)]
    geneSet1 = lapply(RNAseq_Mecp2KO, 
                      function(x) x %>% dplyr::filter(FDR < 0.05 & logFC > 0) %>% 
                        pull(Gene))
    geneSet2 = lapply(RNAseq_Mecp2KO, 
                      function(x) x %>% dplyr::filter(FDR < 0.05 & logFC < 0) %>% 
                        pull(Gene))
    geneSet3 = lapply(RNAseq_Mecp2KO, 
                      function(x) x %>% dplyr::filter(FDR > 0.05 | is.na(FDR)) %>%
                        pull(Gene))
    names(geneSet1) = c("MECP2.KO_vs_Control.WholeCell.Repressed",
                        "MECP2.KO_vs_Control.Nuclear.Repressed",
                        "MECP2.KO_vs_Control.Chromatin.Repressed")
    names(geneSet2) = c("MECP2.KO_vs_Control.WholeCell.Activated",
                        "MECP2.KO_vs_Control.Nuclear.Activated",
                        "MECP2.KO_vs_Control.Chromatin.Activated")
    names(geneSet3) = c("MECP2.KO_vs_Control.WholeCell.Unchanged",
                        "MECP2.KO_vs_Control.Nuclear.Unchanged",
                        "MECP2.KO_vs_Control.Chromatin.Unchanged")

    RNAseq_Mecp2KO_GeneSets = c(geneSet1,geneSet2,geneSet3)
    names(RNAseq_Mecp2KO_GeneSets)

    ##############################################################################################
    # Read Methylation Data
    # CG methylation 
    CG = read.csv("data/8wk_CTX_Stroud2017_mm10_BSmap_CG_within_mm10_ensembl_genes.txt",
                  sep='\t',header = F)
    CG$CG_meth = CG$V2/CG$V3
    head(CG)

    # Read Methylation Data
    load("results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_CA_within_mm10_ensembl_genes.First3kb_excluded.RData")
    head(ensenbl_location.df_CA_meth)
    colnames(ensenbl_location.df_CA_meth)[9] ="CA_meth"
    CA = ensenbl_location.df_CA_meth 

    meth = merge(CG,CA,by.x='V1',by.y='ENSEMBL',all=TRUE) %>% dplyr::select(1,4,12)

    ##############################################################################################
    # merge binding and methylation and RNAseq
    mecp2.binding.meth = merge(mecp2.binding,meth,by.x='ENSEMBL',by.y='V1',all=TRUE) 
    head(mecp2.binding.meth)
    ##############################################################################################


    # Whole Cell
    mecp2.binding.meth.RNAseqKO_wholeCell = merge(mecp2.binding.meth, RNAseq_Mecp2KO[[1]], 
          by ='ENSEMBL', all=T) %>%
          mutate(Binding = ifelse(is.na(SYMBOL), 'Unbound','Bound')) %>% 
          mutate(Meth_CA = ifelse(is.na(CA_meth), 'No_CA','CA')) %>%
          mutate(Meth_CG = ifelse(is.na(CG_meth), 'No_CG','CG')) %>%
          mutate(Expression = ifelse(is.na(logFC), 'Not_Expressed','Expressed')) %>%
          mutate(DEG = case_when(logFC >0 & FDR < 0.05 ~ "Repressed",
                           logFC <0 & FDR < 0.05 ~ "Activated",
                           FDR >=0.05 | is.na(FDR) ~ "Unchanged"))


    # Whole Cell Bound
    Mecp2.Bound.meth.expressed.wholeCell = mecp2.binding.meth.RNAseqKO_wholeCell %>% 
          filter(Expression =='Expressed' & Binding == 'Bound' & Meth_CA == 'CA' & Meth_CG=='CG')
                                                
    # wholeCell Unbound
    Mecp2.UnBound.meth.expressed.wholeCell = mecp2.binding.meth.RNAseqKO_wholeCell %>% 
          filter(Expression =='Expressed' & Binding == 'Unbound' & Meth_CA == 'CA' & Meth_CG=='CG')


    # Write table 
    write.table(Mecp2.Bound.meth.expressed.wholeCell,
                file = "results/MECP2/Mecp2.Bound.meth.expressed.wholeCell.tsv",
                sep='\t',quote = F,
                col.names = TRUE, row.names = F)
                                                                    
    write.table(Mecp2.UnBound.meth.expressed.wholeCell,
                file = "results/MECP2/Mecp2.UnBound.meth.expressed.wholeCell.tsv",
                sep='\t',quote = F,
                col.names = TRUE, row.names = F)


    ##############################################################################################

    # nuclear
    mecp2.binding.meth.RNAseqKO_nuclear = merge(mecp2.binding.meth, RNAseq_Mecp2KO[[2]], 
      by ='ENSEMBL', all=T) %>%
      mutate(Binding = ifelse(is.na(SYMBOL), 'Unbound','Bound')) %>% 
      mutate(Meth_CA = ifelse(is.na(CA_meth), 'No_CA','CA')) %>%
      mutate(Meth_CG = ifelse(is.na(CG_meth), 'No_CG','CG')) %>%
      mutate(Expression = ifelse(is.na(logFC), 'Not_Expressed','Expressed')) %>%
      mutate(DEG = case_when(logFC >0 & FDR < 0.05 ~ "Repressed",
                             logFC <0 & FDR < 0.05 ~ "Activated",
                             FDR >=0.05 | is.na(FDR) ~ "Unchanged"))


    # nuclear Bound
    Mecp2.Bound.meth.expressed.nuclear = mecp2.binding.meth.RNAseqKO_nuclear %>% 
      filter(Expression =='Expressed' & Binding == 'Bound' & Meth_CA == 'CA' & Meth_CG=='CG')

    # nuclear Unbound
    Mecp2.UnBound.meth.expressed.nuclear = mecp2.binding.meth.RNAseqKO_nuclear %>% 
      filter(Expression =='Expressed' & Binding == 'Unbound' & Meth_CA == 'CA' & Meth_CG=='CG')

    # write table
    write.table(Mecp2.UnBound.meth.expressed.nuclear,
                file = "results/MECP2/Mecp2.UnBound.meth.expressed.nuclear.tsv",
                sep='\t',quote = F,
                col.names = TRUE, row.names = F)
    write.table(Mecp2.Bound.meth.expressed.nuclear,
                file = "results/MECP2/Mecp2.Bound.meth.expressed.nuclear.tsv",
                sep='\t',quote = F,
                col.names = TRUE, row.names = F)


    ##############################################################################################

    # chromatin
    mecp2.binding.meth.RNAseqKO_chromatin = merge(mecp2.binding.meth, RNAseq_Mecp2KO[[3]],
      by ='ENSEMBL', all=T) %>%
      mutate(Binding = ifelse(is.na(SYMBOL), 'Unbound','Bound')) %>% 
      mutate(Meth_CA = ifelse(is.na(CA_meth), 'No_CA','CA')) %>%
      mutate(Meth_CG = ifelse(is.na(CG_meth), 'No_CG','CG')) %>%
      mutate(Expression = ifelse(is.na(logFC), 'Not_Expressed','Expressed')) %>%
      mutate(DEG = case_when(logFC >0 & FDR < 0.05 ~ "Repressed",
                             logFC <0 & FDR < 0.05 ~ "Activated",
                             FDR >=0.05 | is.na(FDR) ~ "Unchanged"))


    # chromatin Bound
    Mecp2.Bound.meth.expressed.chromatin = mecp2.binding.meth.RNAseqKO_chromatin %>% 
      filter(Expression =='Expressed' & Binding == 'Bound' & Meth_CA == 'CA' & Meth_CG=='CG')

    # chromatin Unbound
    Mecp2.UnBound.meth.expressed.chromatin = mecp2.binding.meth.RNAseqKO_chromatin %>% 
      filter(Expression =='Expressed' & Binding == 'Unbound' & Meth_CA == 'CA' & Meth_CG=='CG')


    # write table 
    write.table(Mecp2.Bound.meth.expressed.chromatin,
                file = "results/MECP2/Mecp2.Bound.meth.expressed.chromatin.tsv",
                sep='\t',quote = F,
                col.names = TRUE, row.names = F)

    write.table(Mecp2.UnBound.meth.expressed.chromatin,
                file = "results/MECP2/Mecp2.UnBound.meth.expressed.chromatin.tsv",
                sep='\t',quote = F,
                col.names = TRUE, row.names = F)

    ##############################################################################################
    save(Mecp2.Bound.meth.expressed.wholeCell,
         Mecp2.UnBound.meth.expressed.wholeCell,
         mecp2.binding.meth.RNAseqKO_wholeCell,
         Mecp2.Bound.meth.expressed.nuclear,
         Mecp2.UnBound.meth.expressed.nuclear,
         mecp2.binding.meth.RNAseqKO_nuclear,
         Mecp2.Bound.meth.expressed.chromatin,
         Mecp2.UnBound.meth.expressed.chromatin,
         mecp2.binding.meth.RNAseqKO_chromatin,
         file = 'results/RData/MECP2_regulatedGenes.RData')
    ```

7.  **Download BS-seq data (**GSE103214)

    ```{r,echo=TRUE,eval=FALSE}
    library(GEOquery)
    source("scripts/R/readBismarkFiles.R")

    # GSE103214
    dir.create(file.path('data/', 'GSE103214'), showWarnings = FALSE)
    BSdata = paste0('GSM','', 2757476:2757479)

    lapply(BSdata, function(x) { getGEOSuppFiles(GEO = x,fetch_files = TRUE,
                                                 makeDirectory = FALSE,
                                                 baseDir = 'data/GSE103214')})

    ```

    Run these shell command to extract CG and CA sites

    ```{bash,echo=TRUE,eval=FALSE}
    module load parallel/20150122
    ls data/GSE103214/*.gz | parallel --verbose 'zcat {} | grep "CG" >{.}_CG.txt'
    ls data/GSE103214/*.gz | parallel --verbose 'zcat {} | grep "CA" >{.}_CA.txt'
    ls data/GSE103214/*.txt |parallel --verbose 'gzip {}'
    ```

    ```{r,eval=FALSE,echo=TRUE}

    chain = import.chain("data/mm10/mm9ToMm10.over.chain")
    D3ABSseq = list.files(path = 'data/GSE103214/',full.names = T,pattern = 'C[A-Z].txt.gz')
    D3ABSeq.list = list()

    for (i in seq_along(D3ABSseq)){
      list.index = gsub('.txt.gz','',basename(D3ABSseq[i]))
      D3ACG = readBismarkCoverage_col45(D3ABSseq[i],
                                        sample.id = gsub('.txt.gz','',basename(D3ABSseq[i])),
                                        assembly="mm9",min.cov=5)
      D3ACG.GR = getData(D3ACG) %>% GRanges()
      D3ACG.GR.mm10 = liftOver(D3ACG.GR, chain)
      D3ABSeq.list[[list.index]] = unlist(as(D3ACG.GR.mm10,"GRangesList")) %>% 
        as.data.frame() %>% mutate(meth = numCs/coverage)
      
      write.table(D3ABSeq.list[[i]] %>% dplyr::select(1,2,3,9),
                  file = paste0('data/GSE103214/',names(D3ABSeq.list)[i],'.bedGraph'),
                  row.names = FALSE,col.names = FALSE,sep="\t",
                  quote = FALSE)
    }

    saveRDS(D3ABSeq.list,file='results/RData/GSE103214_Cortex_10wk_BSmap.RDS')
    ```

8.  Download G118E MECP2 CUT&RUN data

    ```{r,eval=FALSE,echo=TRUE}
    # GSE243009
    CNRdata = paste0('GSM',7777160:7777171)

    dir.create(file.path('data/', 'GSE243009'), showWarnings = FALSE)
    lapply(CNRdata, function(x) { getGEOSuppFiles(GEO = x,fetch_files = TRUE,
                                                 makeDirectory = FALSE,
                                                 baseDir = 'data/GSE243009')})
    ```

9.  Download

    ```{r,eval=FALSE,echo=TRUE}

    # GSE213752
    dir.create(file.path('data/', 'GSE213752'), showWarnings = FALSE)
    getGEOSuppFiles(GEO = "GSE213752",fetch_files = TRUE,
                                                 makeDirectory = FALSE,
                                                 baseDir = 'data/GSE213752')
    # GSE67293
    dir.create(file.path('data/', 'GSE67293'), showWarnings = FALSE)
    getGEOSuppFiles(GEO = "GSE67293",fetch_files = TRUE,
                    makeDirectory = FALSE,
                    baseDir = 'data/GSE67293')
    ```

### **Figure 1: CUT&RUN uncovers MECP2 Binding Hotspots (MBHs) across the neural genome.**

1.  Figure 1A.

    ```{r,eval=FALSE,echo=TRUE}

    # Function to average column value across bins and step size
    summarize_logFC_mCA = function(x,binSize = 19,stepSize =4){
      df.bin =list()
      for (i in seq(from=1, to=nrow(x), by=stepSize)){
        print(i)
        start = i
        stop  = i+binSize
        if(stop <= nrow(x)){
          df = x[start:stop,]
          df.bin[[i]] = df  %>% summarize(cov.mean=mean(.[,1]),cov.mean.sd = sd(.[,1]),mCA.mean=mean(.[,2]))
        }
        else{
          return(df.bin)
        }
      }
    }

    # Load genome wide CA methylation BSMap data
    load('results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_CA.RData',verbose = TRUE)

    # Read mean coverage of MECP2 7wk_MECP2 sample
    MECP2_7wk_cov = read.csv("results/MECP2/7wk_CTX_MECP2_gene_Cov.bed",sep = "\t",header = F)
    colnames(MECP2_7wk_cov) = c('chr','start','end','7wk_MECP2')
    MECP2_7wk_cov$`7wk_MECP2` = ifelse(MECP2_7wk_cov$`7wk_MECP2` == '.', 0, MECP2_7wk_cov$`7wk_MECP2`)
    dim(MECP2_7wk_cov)
    MECP2_7wk_cov = MECP2_7wk_cov %>% mutate(`7wk_MECP2` = as.numeric(`7wk_MECP2`), 
                                             geneLength = (end-start)/1000,
                                             norm_7wk_MECP2 = `7wk_MECP2`/geneLength) #%>% 
      filter(norm_7wk_MECP2 != max(norm_7wk_MECP2))

    # Read mean coverage of IgG 7wk_IgG sample
    IgG_7wk_cov = read.csv("results/MECP2/7wk_CTX_IgG_gene_Cov.bed",sep = "\t",header = F)
    colnames(IgG_7wk_cov) = c('chr','start','end','7wk_IgG')
    IgG_7wk_cov$`7wk_IgG` = ifelse(IgG_7wk_cov$`7wk_IgG` == '.', 0, IgG_7wk_cov$`7wk_IgG`)
    head(IgG_7wk_cov)
    IgG_7wk_cov = IgG_7wk_cov %>% mutate(`7wk_IgG` = as.numeric(`7wk_IgG`), 
                                         geneLength = (end-start)/1000,
                                         norm_IgG_7wk_cov = `7wk_IgG`/geneLength) #%>% 
      filter(norm_IgG_7wk_cov != max(norm_IgG_7wk_cov))


    # combine all the above data frame
    MECP2_sample_coverage = cbind(MECP2_7wk_cov,IgG_7wk_cov) %>% 
      dplyr::select(1,2,3,6,12) %>% 
      mutate(ID = paste0(chr,'_',start,'_',end)) #%>% 
    head(MECP2_sample_coverage)



    # Convert MECP2 coordinated to GRanges
    MECP2.bed = MECP2_7wk_cov[,c(1,2,3)]
    colnames(MECP2.bed) = c('chr','start','end')
    head(MECP2.bed)
    MECP2.bed.GR = GRanges(MECP2.bed)

    # calculate mCA on MECP2 peaks
    MECP2_peak_cov_meth = regionCounts(CTX_CA,MECP2.bed.GR)
    head(MECP2_peak_cov_meth)
    MECP2_peak_cov_meth.df = getData(MECP2_peak_cov_meth)
    MECP2_peak_cov_meth.df$mCA = MECP2_peak_cov_meth.df$numCs/MECP2_peak_cov_meth.df$coverage
    MECP2_peak_cov_meth.df$ID = paste0(MECP2_peak_cov_meth.df$chr,'_',MECP2_peak_cov_meth.df$start,"_",MECP2_peak_cov_meth.df$end)
    #MECP2_peak_cov_meth.df = MECP2_peak_cov_meth.df %>% column_to_rownames('ID')

    # Merge MECP2 coverage and mCA level on MECP2 peaks
    MECP2_peak_cov_meth.merged = merge(MECP2_sample_coverage,MECP2_peak_cov_meth.df,by='ID')
    dim(MECP2_peak_cov_meth.merged)
    head(MECP2_peak_cov_meth.merged)


    MECP2_peak_cov_meth.merged.list = list(`7wk_MECP2` = MECP2_peak_cov_meth.merged[,c(5,14)],
                                           `7wk_IgG` = MECP2_peak_cov_meth.merged[,c(6,14)])
    MECP2_peak_cov_meth.merged.list = lapply(MECP2_peak_cov_meth.merged.list, function(x)
    { x %>% mutate_if(is.character, as.numeric)})

    MECP2_peak_cov_meth.merged.list = lapply(MECP2_peak_cov_meth.merged.list, function(x) x %>% 
                                               arrange(desc(mCA)) %>% filter(.[,1] >0))


    tmp = lapply(MECP2_peak_cov_meth.merged.list, function(x) 
      summarize_logFC_mCA(x %>% as.data.frame(),binSize = 800,stepSize = 80))
    tmp1 = lapply(tmp, function(x) do.call(rbind,x))
    tmp2 = plyr::ldply(tmp1,data.frame)
    colnames(tmp2)[1] = 'MECP2'
    MECP2_peak_cov_meth.merged.avg = tmp2[,c(2,3,4,1)]

    # calculate pearson correlation between mCA and MECP2 on geneBody
    mCA_MECP2.corr.df = rbindlist(lapply(
      lapply(MECP2_peak_cov_meth.merged.list, function(x) cor.test(x[,1],x[,2])), tidy),
      use.names = TRUE, idcol = 'Sample')


    cor.plot = MECP2_peak_cov_meth.merged.avg  %>% #filter(cov.mean < 2) %>% #head()
      ggplot(aes(x=mCA.mean,y=cov.mean,color=MECP2))+
      geom_point(size=0.5)+
      geom_line()+
      geom_ribbon(aes(x=mCA.mean,y=cov.mean,
                     ymin=cov.mean-cov.mean.sd,
                    ymax=cov.mean+cov.mean.sd,fill=MECP2),
               alpha=0.2,color='NA') +
      scale_fill_manual(name = "MECP2",values = c('black','red'),aesthetics = c("colour", "fill"))+
      
      theme_test(20)+
      xlab('mCA/CA')+
      ylab('Gene Body MECP2 coverage')
    cor.plot
    cor.plot+annotate(geom="text", x=0.015, y=65, 
                      label=paste0('R = ',round(mCA_MECP2.corr.df$estimate[1],2),
                                   ifelse(mCA_MECP2.corr.df$p.value[1] == 0,
                                   ', p < 2.2e-16',mCA_MECP2.corr.df$p.value[1])),
                      color="red")+
             annotate(geom="text", x=0.015, y=70, 
                      label=paste0('R = ',round(mCA_MECP2.corr.df$estimate[2],2),
                                   ifelse(mCA_MECP2.corr.df$p.value[2] == 0,
                                    ', p < 2.2e-16',paste0(', p = ',round(mCA_MECP2.corr.df$p.value[2],2)))),
               color="black")
    ggsave(file='Plots/MECP2_mCA_corr_geneBody.pdf',height = 12,width = 16,units = 'cm')

    ```

2.  Figure 1D.

    ```{r,eval=FALSE,echo=TRUE}
    # compare MECP2 CUT&RUN in MBHs, high mCA aand H3K9me3.

    load(file = "results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_CA.RData",verbose = T)
    tiles = tileGenome(seqinfo(BSgenome.Mmusculus.UCSC.mm10), tilewidth=5000,
                        cut.last.tile.in.chrom=TRUE)
    CTX_CA_meth_tiles =regionCounts(CTX_CA,tiles)
    CTX_CA_meth_tiles.df = getData(CTX_CA_meth_tiles)
    CTX_CA_meth_tiles.df$meth = CTX_CA_meth_tiles.df$numCs/CTX_CA_meth_tiles.df$coverage

    CTX_CA_meth_tiles.df %>% filter(coverage > 100) %>% 
      arrange(desc(meth)) %>% 
      top_n(1000) %>% 
      select(1,2,3) %>% 
      write.table("results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_top1000_CA_5kbbin.bed",sep = "\t",
                  col.names = F,row.names = F,quote = FALSE)

    mecp2_cov = c(list.files("results/MECP2",pattern = ".*_MECP2WT.*_top1000_CA.bed",
                            full.names = TRUE),
                 list.files("results/MECP2",pattern = ".*_MECP2WT.*_H3K9me3_noBlacklist.bed",
                            full.names = TRUE),
                 list.files("results/MECP2",pattern = ".*_MECP2WT.*peak_Coverage.bed",
                            full.names = TRUE))
                  
    names(mecp2_cov) = c("IgG_WT_Rep1_high.mCA", "MECP2_WT_Rep1_high.mCA", "IgG_WT_Rep2_high.mCA", "MECP2_WT_Rep2_high.mCA",
                         "IgG_WT_Rep1_H3K9me3", "MECP2_WT_Rep1_H3K9me3", "IgG_WT_Rep2_H3K9me3", "MECP2_WT_Rep2_H3K9me3", 
                         "IgG_WT_Rep1_MBHs", "MECP2_WT_Rep1_MBHs", "IgG_WT_Rep2_MBHs", "MECP2_WT_Rep2_MBHs")

    mecp2_cov = lapply(mecp2_cov, function(x)
      read.csv(x,sep = "\t",header = F) %>% 
        mutate(V4 = as.numeric(V4), len=(V3-V2)/1000) %>% 
        filter(!is.na(V4)) %>% mutate(norm_cov = V4/len))

    rbindlist(mecp2_cov,idcol = 'Id') %>% 
      mutate(Group = gsub('MECP2_WT_Rep._|IgG_WT_Rep._','',Id)) %>% 
      mutate(Sample = gsub('_WT_Rep[0-9]_H3K9me3|_WT_Rep[0-9]_high.mCA|_WT_Rep[0-9]_MBHs','',Id)) %>% 
      mutate(Id = paste0(V1,'_',V2,'_',V3)) %>% 
      dplyr::select(1,8,9,7) %>% 
      dplyr::group_by(Id,Group,Sample) %>% 
      dplyr::summarize(avg_norm_covv = mean(norm_cov, na.rm=TRUE)) %>% 
      ggplot(aes(x=Group,y=log2(avg_norm_covv+1),color=Sample))+
      geom_boxplot() +
      theme_test(20) +
      scale_color_manual("CUT & RUN",values = c('grey','red'))+
      stat_compare_means(comparisons = list(
                       c("H3K9me3",'MBHs'),
                       c('high.mCA','MBHs'),
                       c('high.mCA','H3K9me3'))) +
      ylab("log2 (MECP2 Coverage +1)")
    ggsave('Plots/MECP2_on_H3K9me3_highmCA_MBHs.pdf',height = 6,width = 8)


    ```

3.  Figure 1F

    ```{r,eval=FALSE,echo=TRUE}

    # import MECP2 peaks
    regions = import("results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_filtered.bed")

    # generate random genomic regions
    randomRegions = createRandomRegions(nregions=23193,
                                        length.mean=500, length.sd=20, genome="mm10", 
                                        mask=NULL, non.overlapping=TRUE)

    regions_GC = gcContentCalc(regions , organism=Mmusculus, verbose=TRUE) %>% 
      as.data.frame() %>% 
      dplyr::rename(MECP2 = 1) 

    randomRegions_GC = gcContentCalc(randomRegions , organism=Mmusculus, verbose=TRUE) %>% 
      as.data.frame() %>% 
      dplyr::rename(Random = 1) 

    p = cbind(randomRegions_GC,regions_GC) %>% 
        melt() %>% 
        ggboxplot(x = "variable", y = "value",
                     color = "variable", palette = c("gray","blue"))+
        ylab("GC%")

    #  Add p-value
    p + stat_compare_means()
    ggsave('Plots/GC_percent_MECP2_peaks.pdf',height = 4,width = 3)
    ```

4.  Figure 1G.

    ```{r,eval=FALSE,echo=TRUE}

    # GGGTGT, GGGTTT, TTTGGG frequency. on MBH sites
    x = read.csv('results/CAsequence/GT_motif_freq_on_MECP2.txt',sep = '\t',header = T) %>% 
      dplyr::select(1,5,2,14)
    head(x)
    colnames(x) = gsub('X[0-9]\\.|\\..*','',colnames(x))  

    x %>% filter(abs(.[,1]) < 1990) %>% 
      #mutate(GGTGT = GGTGT-0.09) %>% 
      #mutate(AKTCATTT = AKTCATTT-0.01) %>% 
      melt(id.vars = 'Distance') %>% 
      ggplot(aes(x=Distance,y=value,color=variable))+ 
      geom_line()+
      scale_color_manual(values = c('red','black','grey'))+
      theme_test(20)+
      labs(color=NULL)+
      ylab('Motifs per base per peak')
    ggsave('Plots/GT_motif_on_MECP2_peaks.pdf',height = 6,width = 10)
    ```

5.  Supplementary Figure 1A.

    ```{r,eval=FALSE,echo=TRUE}
    # This code has been taken from https://davidzeleny.net/wiki/doku.php/recol:monte-carlo-pearson

    # Function to test correlation using permutation
    test.cor.perm = function (x, y, nperm = 499)
    {
      r.obs = cor.test(x = x, y = y,method = "spearman",exact = FALSE)$estimate
      P.par = cor.test (x = x, y = y,method = "spearman",exact = FALSE)$p.value
      #  r.per = replicate (nperm, expr = cor (x = x, y = sample (y)))
      r.per = sapply (1:nperm, FUN = function (i) cor.test(x = x, y = sample (y),method = "spearman",exact = FALSE)$estimate)
      r.per = c(r.per, r.obs)
      hist (r.per, xlim = c(-1,1))
      abline (v = r.obs, col = 'red')
      P.per = sum (abs (r.per) >= abs (r.obs))/(nperm + 1) 
      return (list (r.obs = r.obs, P.par = P.par, P.per = P.per))
    }


    # read the multibigwigout file has been generated using deeptools for MECP2 CUT&RUN and MECP2 ChIPSeq
    mecp2_cnr_chip_corr = read.csv("results/MECP2_CNR_ChIPseq_comparison/MECP2_CNR_ChIPseq_multiBigWigOut.tab",header = T,sep="\t",check.names = FALSE) #%>% head()
    colnames(mecp2_cnr_chip_corr) = c("chr",'start','end',
                                      'MECP2_CNR_R1','MECP2_CNR_R2',
                                      'MECP2_ChIPseq_Ab1','MECP2_ChIPseq_Ab2')

    # read the multibigwigout file has been generated using deeptools for MECP2 CUT&RUN and MECP2 CUT&TAG
    mecp2_cnr_cnt_corr = read.csv("results/MECP2_CNR_ChIPseq_comparison/MECP2_CNR_CNT_multiBigWigOut.tab",header = T,sep="\t",check.names = FALSE) #%>% head()
    colnames(mecp2_cnr_cnt_corr) = c("chr",'start','end',
                                     'MECP2_CNR_R1','MECP2_CNR_R2',
                                     'MECP2_CNT_Ab1','MECP2_CNT_Ab2')

    cor.perm.list = list()
    cor.perm.list[[1]] = test.cor.perm(mecp2_cnr_chip_corr$MECP2_CNR_R1,
                                       mecp2_cnr_chip_corr$MECP2_CNR_R2,nperm = 999)
    cor.perm.list[[2]] = test.cor.perm(mecp2_cnr_chip_corr$MECP2_CNR_R1,
                                       mecp2_cnr_chip_corr$MECP2_ChIPseq_Ab1,nperm = 999)
    cor.perm.list[[3]] = test.cor.perm(mecp2_cnr_chip_corr$MECP2_CNR_R1,
                                       mecp2_cnr_chip_corr$MECP2_ChIPseq_Ab2,nperm = 999)
    cor.perm.list[[4]] = test.cor.perm(mecp2_cnr_chip_corr$MECP2_CNR_R2,
                                       mecp2_cnr_chip_corr$MECP2_ChIPseq_Ab1,nperm = 999)
    cor.perm.list[[5]] = test.cor.perm(mecp2_cnr_chip_corr$MECP2_CNR_R2,
                                       mecp2_cnr_chip_corr$MECP2_ChIPseq_Ab2,nperm = 999)
    cor.perm.list[[6]] = test.cor.perm(mecp2_cnr_chip_corr$MECP2_ChIPseq_Ab1,
                                       mecp2_cnr_chip_corr$MECP2_ChIPseq_Ab2,nperm = 999)


    cor.perm.list[[7]]  = test.cor.perm(mecp2_cnr_cnt_corr$MECP2_CNR_R1,
                                        mecp2_cnr_cnt_corr$MECP2_CNR_R2,nperm = 999)
    cor.perm.list[[8]]  = test.cor.perm(mecp2_cnr_cnt_corr$MECP2_CNR_R1,
                                        mecp2_cnr_cnt_corr$MECP2_CNT_Ab1,nperm = 999)
    cor.perm.list[[9]]  = test.cor.perm(mecp2_cnr_cnt_corr$MECP2_CNR_R1,
                                        mecp2_cnr_cnt_corr$MECP2_CNT_Ab2,nperm = 999)
    cor.perm.list[[10]]  = test.cor.perm(mecp2_cnr_cnt_corr$MECP2_CNR_R2,
                                         mecp2_cnr_cnt_corr$MECP2_CNT_Ab1,nperm = 999)
    cor.perm.list[[11]]  = test.cor.perm(mecp2_cnr_cnt_corr$MECP2_CNR_R2,
                                         mecp2_cnr_cnt_corr$MECP2_CNT_Ab2,nperm = 999)
    cor.perm.list[[12]]  = test.cor.perm(mecp2_cnr_cnt_corr$MECP2_CNT_Ab1,
                                         mecp2_cnr_cnt_corr$MECP2_CNT_Ab2,nperm = 999)



    ```

6.  Supplementary Figure 1G.

    ```{r,eval=FALSE,echo=TRUE}

    # Function to average column value across bins and step size
    summarize_logFC_mCA = function(x,binSize = 19,stepSize =4){
      df.bin =list()
      for (i in seq(from=1, to=nrow(x), by=stepSize)){
        print(i)
        start = i
        stop  = i+binSize
        if(stop <= nrow(x)){
          df = x[start:stop,]
          df.bin[[i]] = df  %>% summarize(cov.mean=mean(.[,1]),cov.mean.sd = sd(.[,1]),mCA.mean=mean(.[,2]))
        }
        else{
          return(df.bin)
        }
      }
    }

    CNR_files = list.files('results/CNR_Coverage/',pattern = "G118E_vs_IgG_Rep*",full.names = TRUE)
    CNR_files.list = lapply(CNR_files, read.csv, sep="\t",header=F)
    CNR_files.names = c("G118E_vs_WT_Rep1","G118E_vs_WT_Rep2","G118E_vs_WT_Rep3")
    CNR_files.list = lapply(seq_along(CNR_files.list),function(x) {
      setNames(CNR_files.list[[x]],nm = c('chr','start','end',CNR_files.names[x])) })

    for(i in 1:length(CNR_files.list)) {
      CNR_files.list[[i]]$Cov = ifelse(CNR_files.list[[i]][,4] == '.', 0 , CNR_files.list[[i]][,4])
      CNR_files.list[[i]]$Cov = as.numeric(CNR_files.list[[i]]$Cov)
      CNR_files.list[[i]]$geneLength = (CNR_files.list[[i]]$end - CNR_files.list[[i]]$start)/1000
      CNR_files.list[[i]]$norm = CNR_files.list[[i]]$Cov/CNR_files.list[[i]]$geneLength
      CNR_files.list[[i]] = CNR_files.list[[i]][,c(1,2,3,7)] %>% arrange(desc(norm)) 
    }
    CNR_files.list = lapply(seq_along(CNR_files.list),function(x) {
      setNames(CNR_files.list[[x]],nm = c('chr','start','end',CNR_files.names[x])) })

    CNR_files.df = Reduce(full_join,CNR_files.list)
    CNR_files.df$ID = paste0(CNR_files.df$chr,'_',CNR_files.df$start,'_',CNR_files.df$end)

    # Convert GeneBody coordinated to GRanges
    geneBody.bed = CNR_files.df[,c(1,2,3)]
    colnames(geneBody.bed) = c('chr','start','end')
    head(geneBody.bed)
    geneBody.bed.GR = GRanges(geneBody.bed)

    geneBody.bed.GR

    # calculate mCA on MECP2 peaks
    # Load genome wide CA methylation BSMap data
    load('results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_CA.RData',verbose = TRUE)
    geneBody_cov_meth = regionCounts(CTX_CA,geneBody.bed.GR)
    head(geneBody_cov_meth)
    #save(file = 'results/RData/MECP2_G118E_CNR_geneBody_Coverage.RData',geneBody_cov_meth)

    geneBody_cov_meth.df = getData(geneBody_cov_meth)
    geneBody_cov_meth.df$mCA = geneBody_cov_meth.df$numCs/geneBody_cov_meth.df$coverage
    geneBody_cov_meth.df$ID = paste0(geneBody_cov_meth.df$chr,'_',geneBody_cov_meth.df$start,"_",geneBody_cov_meth.df$end)
    #MECP2_peak_cov_meth.df = MECP2_peak_cov_meth.df %>% column_to_rownames('ID')

    # Merge MECP2 coverage and mCA level on MECP2 peaks
    geneBody_cov_meth= merge(CNR_files.df,geneBody_cov_meth.df,by='ID')
    dim(geneBody_cov_meth)
    colnames(geneBody_cov_meth)



    geneBody_cov_meth.list = list(geneBody_cov_meth[,c(5,15)],
                                  geneBody_cov_meth[,c(6,15)],
                                  geneBody_cov_meth[,c(7,15)])

    names(geneBody_cov_meth.list) = CNR_files.names

    geneBody_cov_meth.list = lapply(geneBody_cov_meth.list, function(x) x %>% arrange((mCA)) %>% filter( !(is.na(.[,1])))) 

    #geneBody_cov_meth.list[[1]]$G118E_vs_WT_Rep1 = log2(geneBody_cov_meth.list[[1]]$G118E_vs_WT_Rep1)
    tmp = lapply(geneBody_cov_meth.list, function(x) summarize_logFC_mCA(x,binSize = 800,stepSize = 80))
    tmp1 = lapply(tmp, function(x) do.call(rbind,x))
    tmp2 = plyr::ldply(tmp1,data.frame)
    colnames(tmp2)[1] = 'Samples'
    geneBody_cov_meth.merged.avg = tmp2[,c(2,3,4,1)]


    #geneBody_cov_meth.merged.avg$Samples = CNR_files.names
    geneBody_cov_meth.merged.avg$Rep = gsub("MECP2.*_","",geneBody_cov_meth.merged.avg$Samples)
    geneBody_cov_meth.merged.avg$Samples = gsub("_Rep.","",geneBody_cov_meth.merged.avg$Samples)
    geneBody_cov_meth.merged.avg$Samples = factor(geneBody_cov_meth.merged.avg$Samples,
                                                  levels = c("MECP2_WT","MECP2_G118E"))


    geneBody_cov_meth.merged.avg  %>% #filter(!(grepl('pre',Samples))) %>% #head()
      ggplot(aes(x=mCA.mean,y=cov.mean,))+
      geom_point(size=0.5)+
      #scale_color_manual(values = c('red','red','red','grey','grey','grey'))+
      #geom_line()+
      stat_cor( method = "pearson")+
      theme_test(20)+
      xlab('mCA/CA')+
      ylab("log2 (G118E/IgG) - log2 (WT/IgG)")+
      guides(color = guide_legend(override.aes = list(size = 2)))+
      facet_wrap(~Rep,scales = "free_y")+
      geom_ribbon(aes(x=mCA.mean,y=cov.mean,
                      ymin=cov.mean-cov.mean.sd,
                      ymax=cov.mean+cov.mean.sd),
                  alpha=0.2,color='NA') +
      scale_fill_manual(name = "MECP2",values = c('red','black'),aesthetics = c("colour", "fill"))

    ggsave('Plots/GSE243009_CNR_vs_mCA_G118E_vs_WT_corr.pdf',height = 7,width = 18)

    ```

7.  Supplementary Figure 1I.

    ```{r,eval=FALSE,echo=TRUE}

    dir.create(file.path(paste0(path,"/results/MECP2_motifs")), showWarnings = FALSE)

    options(meme_bin = "/cm/shared/apps/meme/5.3.3/bin/")
    check_meme_install()

    mecp2  = "results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_filtered.bed"
    MECP2_peaks.GR = readPeakFile(mecp2)
    MECP2_peaks.GR.100bp = resize(MECP2_peaks.GR,width = 100,fix = 'center')
    as.data.frame(MECP2_peaks.GR.100bp) %>% 
      dplyr::select(1,2,3,4) %>% 
      write.table('results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_filtered_pm50bp.bed',
                  col.names = F,row.names = F,sep='\t',quote = F)

    MECP2_peaks.GR.100bp.seq = get_sequence(MECP2_peaks.GR.100bp,Mmusculus)

    MECP2_peaks.GR.100bp.DREME = runDreme(MECP2_peaks.GR.100bp.seq,
                                           control="shuffle",
                                           maxk =12,
                                           outdir = "results/MECP2_motifs/MECP2_all_peaks_DREME",dna=TRUE)
    save(MECP2_peaks.GR.100bp.DREME,
         file='results/MECP2_motifs/MECP2_all_peaks_DREME/MECP2_all_peaks_DREME.RData')


    MECP2_peaks.GR.100bp.Streme = runStreme(MECP2_peaks.GR.100bp.seq,
                                            control="shuffle",
                                            outdir = "results/MECP2_motifs/MECP2_all_peaks_STREME",
                                            dna=TRUE)

    ```

8.  Supplementary Figure 1J

    ```{r,eval=FALSE,echo=TRUE}

    # CCAC and A/T repeats motif frequency on MBHs sites
    x = read.csv('results/MECP2_motifs/MECP2_all_peaks_STREME/Motif1-4_density_on_MECP2_peaks.txt',
                 sep = '\t',header = T) %>% 
      dplyr::select(1,2,5)

    head(x)
    colnames(x) = gsub('X[0-9]\\.|\\..*','',colnames(x))  

    x %>% filter(abs(.[,1]) < 990) %>% 
      #mutate(CAC = CAC-0.024) %>% 
      #mutate(AKTCATTT = AKTCATTT-0.01) %>% 
      melt(id.vars = 'Distance') %>% 
      ggplot(aes(x=Distance,y=value,color=variable))+ 
      geom_line()+
      scale_color_manual(values = c('red','blue'))+
      theme_test(20)+
      labs(color=NULL)+
      ylab('Motifs per base per peak')
    ggsave('Plots/motif24_on_MECP2_peaks.pdf',height = 6,width = 14,)

    ```

9.  Supplementary Figure 1K.

    ```{r,eval=FALSE,echo=TRUE}

    # Run known motif enrichment analyses using AME

    ame_vs_shuffle = runAme(MECP2_peaks.GR.100bp.seq,
                             outdir = "results/MECP2_motifs/MECP2_all_peaks_AME",
                             database = motifs,control = )

    AME = importAme("results/MECP2_motifs/MECP2_all_peaks_AME/ame.tsv")

    motif.list = list()
    motif.list.rc = list()
    for (i in c(1,4,5,9,12:20)){
      con = AME[i,5] %>% as.vector() %>% unlist() %>% setNames(NULL)
      con_name = AME[i,3] %>% as.vector() %>% unlist() %>% setNames(NULL)
      motif.list.rc[[i]] = motif_rc(create_motif(con,name=con_name))
      motif.list[[i]] = create_motif(con,name=con_name)
    }
    pdf("results/MECP2_motifs/MECP2_all_peaks_AME/SelectedEnriched_motifLogo.pdf",height = 10)
    view_motifs(motif.list, show.positions.once = FALSE, names.pos = "right")
    view_motifs(motif.list.rc, show.positions.once = FALSE, names.pos = "right")
    dev.off()
    ```

### **Figure 2: MECP2 binding to MBH sites is largely methylation-independent.**

1.  Figure 2A.

    ```{r,eval=FALSE,echo=TRUE}

    load(file = "results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_CA.RData",verbose = T)

    MECP2_peaks = read.csv("results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_peakID_filtered.bed",sep='\t',header = F) 
    colnames(MECP2_peaks) = c('Chr','Start','End','PeakID')
    MECP2_peaks.GR = MECP2_peaks %>% GRanges() 

    tiles = tileMethylCounts(CTX_CA,win.size=10000,step.size=10000,cov.bases = 5)
    tiles.df = getData(tiles) |> 
      dplyr::mutate(meth = numCs/coverage) |> 
      dplyr::select(c(1,2,3,8)) %>% GRanges()

    CTX_CA_meth =regionCounts(CTX_CA,MECP2_peaks.GR)

    getMethylationStats(CTX_CA, plot = TRUE)

    CTX_CA_meth =regionCounts(CTX_CA,MECP2_peaks.GR)
    CTX_CA_meth.df = getData(CTX_CA_meth)
    CTX_CA_meth.df$meth = CTX_CA_meth.df$numCs/CTX_CA_meth.df$coverage

    CTX_CA.df = getData(CTX_CA) |> dplyr::mutate(meth = numCs/coverage) |> dplyr::select(c(1,2,3,4,8))
    CTX_CA.GR = CTX_CA.df |> GRanges()
    mat2 = normalizeToMatrix(CTX_CA.GR, resize(MECP2_peaks.GR,width = 1,fix='center'), value_column = "meth", mean_mode = "absolute",
                             extend = 4000, w = 50, background = NA, smooth = TRUE,target_ratio = 0.3)
    meth_col_fun = colorRamp2(c(0, 0.5), c("white", "red"))
    ht_list = EnrichedHeatmap(mat2, col = meth_col_fun, name = "methylation", column_title = "CA methylation near TSS",
                              top_annotation = HeatmapAnnotation(enriched = anno_enriched(ylim=c(0,0.03))))

    density_map = extract_anno_enriched(draw(ht_list))
    pdf(file='Plots/mCA_density_on_MECP2_peaks.pdf',height = 8,width = 10)
    extract_anno_enriched(draw(ht_list))
    dev.off()


    #######################################################################################################


    load(file = "results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_CG.RData",verbose=TRUE)

    CTX_CG_meth =regionCounts(CTX_CG,MECP2_peaks.GR)
    CTX_CG_meth.df = getData(CTX_CG_meth)
    CTX_CG_meth.df$meth = CTX_CG_meth.df$numCs/CTX_CG_meth.df$coverage

    CTX_CG.df = getData(CTX_CG) |> dplyr::mutate(meth = numCs/coverage) |> dplyr::select(c(1,2,3,4,8))
    CTX_CG.GR = CTX_CG.df |> GRanges()
    mat2 = normalizeToMatrix(CTX_CG.GR, resize(MECP2_peaks.GR,width = 1,fix='center'), 
                             value_column = "meth", mean_mode = "absolute",
                             extend = 4000, w = 100, background = NA, smooth = TRUE,target_ratio = 0.3)
    meth_col_fun = colorRamp2(c(0, 1), c("white", "red"))
    top_annotation =  HeatmapAnnotation(enriched = anno_enriched(ylim=c(0,1)))
    ht_list  =EnrichedHeatmap(mat2, col = meth_col_fun, name = "methylation", 
                              column_title = "CG methylation near MECP2",
                              top_annotation = HeatmapAnnotation(enriched = anno_enriched(ylim=c(0,0.5))))

    density_map = extract_anno_enriched(draw(ht_list))

    pdf(file='Plots/mCG_density_on_MECP2_peaks.pdf',height = 8,width = 10)
    extract_anno_enriched(draw(ht_list))
    dev.off()

    ```

2.  Figure 2B and Supplementary Figure 6.

    ```{r,echo=TRUE,eval=FALSE,message=FALSE}

    Diif_MECP2_D3AKO_vs_WT = list.files(path='results/MECP2/',
                                        pattern = 'MECP2.*_DNMT3A.*.noBlacklist.bed',
                                        full.names = T)[c(1:3)]
    Diif_MECP2_D3AKO_vs_WT
    file.name = gsub('.noBlacklist.bed','',basename(Diif_MECP2_D3AKO_vs_WT))
    names(Diif_MECP2_D3AKO_vs_WT) = file.name
    Diif_MECP2_D3AKO_vs_WT.bed= lapply(Diif_MECP2_D3AKO_vs_WT, readPeakFile)

    MBHs_counts = lapply(Diif_MECP2_D3AKO_vs_WT.bed, as.data.frame) %>% 
                      lapply(.,dim) %>% as.data.frame() %>% t() %>% .[,1] %>% as.data.frame()
    colnames(MBHs_counts) = 'Count'
    MBHs_counts$Group = c('No Change','Gain','Loss')
    MBHs_counts$Group2 = c('MECP2','MECP2','MECP2')
    MBHs_counts[-5,] %>% 
      mutate(Group= factor(Group, levels=c('Loss','Gain','No Change'))) %>% 

    ggplot(aes(x=Group,y=Count,fill=Group2))+
    geom_bar(stat='identity')+
    coord_flip()+
      xlab('Dnmt3a cKO vs WT')+
      theme_test(20)+
      scale_fill_manual(values=c('grey'))

    load("results/RData/Boxer_RNAseq_data.RData")

    Diif_MECP2_D3AKO_vs_WT.anno.logFC = lapply(Diif_MECP2_D3AKO_vs_WT.anno, function(x) {
      merge(x %>% dplyr::select(ENSEMBL) %>% group_by(ENSEMBL) %>% 
              summarise(Count=dplyr::n()) %>% filter(Count >=2),
            RNAseq.list[[7]]) %>% filter(FDR < 0.05 & !(is.na(ENSEMBL)))  
    })
      
    Diif_MECP2_D3AKO_vs_WT.anno.logFC.df = rbindlist(Diif_MECP2_D3AKO_vs_WT.anno.logFC,idcol = 'Group') %>%   mutate(MBHs = case_when(grepl('unchaged',Group)~'No Change',
                             grepl('*_up.*WT_vs_KO',Group)~'Loss',
                             grepl('*_up.*KO_vs_WT',Group)~'Gain'),
             MBHs= factor(MBHs,levels=c('Gain','No Change','Loss'))) %>% dplyr::select(2,3,4,5,9) %>% distinct() 
    MBHs_number = table(Diif_MECP2_D3AKO_vs_WT.anno.logFC.df$MBHs)
    MBHs_number = paste0(names(MBHs_number), ' (n=',MBHs_number,')')

    ggplot(Diif_MECP2_D3AKO_vs_WT.anno.logFC.df, aes(x=MBHs,y=logFC))+
      geom_boxplot()+
      ylab('logFC (DNMT3A KO vs WT RNA-seq)')+
      theme_test(20)+
      theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))+
      geom_hline(yintercept = 0,linetype='dashed')+
      stat_compare_means(comparisons = list(c('Gain','Loss'),
                                            c('Gain','No Change'),
                                            c('Loss','No Change')))+
      scale_x_discrete(labels=c("Gain" = MBHs_number[1], 
                                "No Change" = MBHs_number[2],
                                "Loss" = MBHs_number[3]))+
      xlab('MBHs')
    ggsave('Plots/MBHs_gene_DNMT3a_KOvs_WT.pdf',height = 7,width = 4)
    #ggsave("Plots/Diff_MBHs_DNMT3AKO_vs_WT.pdf",height = 5,width = 8)
    ```

3.  Figure 2C.

    ```{r,echo=TRUE,eval=FALSE,message=FALSE}

    MECP2_diff.dnmt3awt = list.files("results/MECP2/",pattern = ".sort_multiBigWigOut.tab",
                                     full.names = TRUE)
    names(MECP2_diff.dnmt3awt) = gsub("MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_filtered_|.sort_multiBigWigOut.tab", '', basename(MECP2_diff.dnmt3awt))
    MECP2_diff.dnmt3awt = lapply(MECP2_diff.dnmt3awt, read.csv,  sep="\t",header=T,check.names=F)


    rbindlist(MECP2_diff.dnmt3awt,idcol = "Group") %>% 
      dplyr::select(1,5:8) %>% 
      melt() %>% 
      mutate(variable = gsub('\'','',variable)) %>%
      mutate(Rep = gsub('Dnmt3a_.*_','',variable)) %>% 
      mutate(Sample = gsub('_rep[0-9]','',variable)) %>% 
      mutate(Sample = factor(Sample,levels=c("Dnmt3a_WT","Dnmt3a_KO"))) %>%
      ggplot(aes(x=Sample,y=log2(value),color=Sample))+
        geom_boxplot()+
        facet_wrap(~Group)+
        stat_compare_means() +
        theme_test(20)+
      scale_color_manual(values = c("grey","red"))+
      xlab("")+
      ylab("log2(MECP2 Coverage")
    ggsave("Plots/Diff_MECP2_coverage_Dnmt3aWT.KO.multiBigWigOut.pdf",height = 5,width = 6)
    ```

4.  **Supplementary Figure 2B.**

    ```{r,eval=FALSE,echo=TRUE,message=FALSE}

    # Function to average column value across bins and step size
    summarize_logFC_mCA = function(x,binSize = 19,stepSize =4){
      df.bin =list()
      for (i in seq(from=1, to=nrow(x), by=stepSize)){
        print(i)
        start = i
        stop  = i+binSize
        if(stop <= nrow(x)){
          df = x[start:stop,]
          df.bin[[i]] = df  %>% summarize(cov.mean=mean(.[,1]),cov.mean.sd = sd(.[,1]),mCA.mean=mean(.[,2]))
        }
        else{
          return(df.bin)
        }
      }
    }


    CNR_files = list.files('results/CNR_Coverage/',full.names = TRUE,pattern = "*_Mecp2_*.*_gene.cov.bed")
    CNR_files.list = lapply(CNR_files, read.csv, sep="\t",header=F)
    CNR_files.names = gsub(".bed","",basename(CNR_files))
    CNR_files.list = lapply(seq_along(CNR_files.list),function(x) {
      setNames(CNR_files.list[[x]],nm = c('chr','start','end',CNR_files.names[x])) })

    for(i in 1:length(CNR_files.list)) {
      CNR_files.list[[i]]$Cov = ifelse(CNR_files.list[[i]][,4] == '.', 0 , CNR_files.list[[i]][,4])
      CNR_files.list[[i]]$Cov = as.numeric(CNR_files.list[[i]]$Cov)
      CNR_files.list[[i]]$geneLength = (CNR_files.list[[i]]$end - CNR_files.list[[i]]$start)/1000
      CNR_files.list[[i]]$norm = CNR_files.list[[i]]$Cov/CNR_files.list[[i]]$geneLength
      CNR_files.list[[i]] = CNR_files.list[[i]][,c(1,2,3,7)] %>% arrange(desc(norm)) #%>% dplyr::slice(-1:-5)
    }
    CNR_files.list = lapply(seq_along(CNR_files.list),function(x) {
      setNames(CNR_files.list[[x]],nm = c('chr','start','end',CNR_files.names[x])) })

    CNR_files.df = Reduce(full_join,CNR_files.list)
    CNR_files.df$ID = paste0(CNR_files.df$chr,'_',CNR_files.df$start,'_',CNR_files.df$end)

    # Convert GeneBody coordinated to GRanges
    geneBody.bed = CNR_files.df[,c(1,2,3)]
    colnames(geneBody.bed) = c('chr','start','end')
    head(geneBody.bed)
    geneBody.bed.GR = GRanges(geneBody.bed)

    # calculate mCA on MECP2 peaks
    # Load genome wide CA methylation BSMap data
    load('results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_CA.RData',verbose = TRUE)
    geneBody_cov_meth = regionCounts(CTX_CA,geneBody.bed.GR)
    head(geneBody_cov_meth)

    geneBody_cov_meth.df = getData(geneBody_cov_meth)
    geneBody_cov_meth.df$mCA = geneBody_cov_meth.df$numCs/geneBody_cov_meth.df$coverage
    geneBody_cov_meth.df$ID = paste0(geneBody_cov_meth.df$chr,'_',geneBody_cov_meth.df$start,"_",geneBody_cov_meth.df$end)
    #MECP2_peak_cov_meth.df = MECP2_peak_cov_meth.df %>% column_to_rownames('ID')

    # Merge MECP2 coverage and mCA level on MECP2 peaks
    geneBody_cov_meth= merge(CNR_files.df,geneBody_cov_meth.df,by='ID')
    dim(geneBody_cov_meth)
    head(geneBody_cov_meth)

    geneBody_cov_meth.list = list(geneBody_cov_meth[,c(5,16)],
                                  geneBody_cov_meth[,c(6,16)],
                                  geneBody_cov_meth[,c(7,16)],
                                  geneBody_cov_meth[,c(8,16)])
    names(geneBody_cov_meth.list) =CNR_files.names

    geneBody_cov_meth.list = lapply(geneBody_cov_meth.list, 
                                    function(x) x %>% arrange(desc(mCA)) %>% 
                                      filter(.[,1] >0 & !is.na(.[,1])))

    tmp  = lapply(geneBody_cov_meth.list, function(x) summarize_logFC_mCA(x,binSize = 1200,stepSize = 200))
    tmp1 = lapply(tmp, function(x) do.call(rbind,x))
    tmp2 = plyr::ldply(tmp1,data.frame)
    colnames(tmp2)[1] = 'Samples'
    geneBody_cov_meth.merged.avg = tmp2[,c(2,3,4,1)]

    plt = geneBody_cov_meth.merged.avg %>% 
        ggplot(aes(x=mCA.mean,y=cov.mean,color=Samples))+
        geom_point(size=0.5)+
        geom_line()+
        #facet_grid(Brain_region~variable)+
        #geom_ribbon(aes(x=mCA.mean,y=cov.mean,
        #               ymin=cov.mean-cov.mean.sd,
        #              ymax=cov.mean+cov.mean.sd,fill=Samples),
        #         alpha=0.1,color='NA') +
        scale_fill_manual(name = "DEGs (MECP2 KO vs WT)",
                          values = c('grey','red',"black","darkred"),
                          aesthetics = c("colour", "fill"))+
        #stat_cor()+
        theme_test(20)+
        xlab('mCA/CA')+
        ylab('Gene Body coverage')+
        #ggtitle(names(df.list)[x])+ 
        #ylim(0,3)+
        theme(legend.position = 'top',legend.direction = "vertical")+
        guides(color = guide_legend(override.aes = list(size = 2)))

    pdf('Plots/MECP2_CNR_DNMT3A_KOandWT_mCA_corr.pdf',height = 10,width = 12)
    plt
    dev.off()
    ```

5.  **Supplementary Figure 2C.**

    ```{r,echo=TRUE,eval=FALSE}

    D3A_BSseq = readRDS(file = 'results/RData/GSE103214_Cortex_10wk_BSmap.RDS')
    D3A_BSseq_methylRaw = list()
    for(i in seq_along(D3A_BSseq)) {
         x = D3A_BSseq[[i]]
         D3A_BSseq_methylRaw[[names(D3A_BSseq)[i]]] = new("methylRaw",
                                                          data.frame(chr=x[,1],start=x[,2],end=x[,3],
                               strand=x[,5],coverage=(x[,6]),
                               numCs=x[,7],numTs=x[,8]),
        sample.id=names(D3A_BSseq)[i],
        assembly='mm10',
        context='context',
        resolution="base")
    }

    # merge replicates 
    merge_BSrep = function(x,y){
      rbind(getData(x),getData(y)) %>% 
              group_by(chr,start,end,strand) %>%
              summarise_all(., sum, na.rm = TRUE) 
    }
    D3A_BSseq_methylRaw_repMerged = list()
    D3A_BSseq_methylRaw_repMerged = mclapply(c(1,2,5,6),function(x) 
                                          { merge_BSrep(D3A_BSseq_methylRaw[[x]],
                                                        D3A_BSseq_methylRaw[[x+2]])})
    names(D3A_BSseq_methylRaw_repMerged) = gsub('rep1\\.','',names(D3A_BSseq_methylRaw)[c(1,2,5,6)])


    D3A_BSseq_methylRaw_repMerged.list = list()

    for(i in seq_along(D3A_BSseq_methylRaw_repMerged)) {
      x = D3A_BSseq_methylRaw_repMerged[[i]] %>% as.data.frame()
      D3A_BSseq_methylRaw_repMerged.list[[names(D3A_BSseq_methylRaw_repMerged)[i]]] = new("methylRaw",
                                                           data.frame(chr=x[,1],start=x[,2],end=x[,3],
                                                                      strand=x[,4],coverage=(x[,5]),
                                                                      numCs=x[,6],numTs=x[,7]),
                                                       sample.id=names(D3A_BSseq_methylRaw_repMerged)[i],
                                                       assembly='mm10',
                                                       context='context',
                                                       resolution="base")
    }
    saveRDS(D3A_BSseq_methylRaw_repMerged.list,
            file = "results/RData/GSE103214_BSseq_Cortex_10wk_repMerged_mm10.RDS")

    for( i in seq_along(D3A_BSseq_methylRaw_repMerged)){
      write.table(D3A_BSseq_methylRaw_repMerged[[i]],
                  file = paste0('data/GSE103214/',
                                names(D3A_BSseq_methylRaw_repMerged)[i],'_repMerged_mm10.txt'))
    }


    # Classify MECP2 peaks based on decreased mCG after DNMT3A KO
    # Read MECP2 final peaks
    MECP2_peaks = read.csv("results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_peakID_filtered.bed",sep='\t',header = F) 
    colnames(MECP2_peaks) = c('Chr','Start','End','PeakID')
    MECP2_peaks.GR = MECP2_peaks |> GRanges() 


    MECP2_mCG_D3A = list()

    MECP2_mCG_D3A = lapply(D3A_BSseq_methylRaw_repMerged.list,
                           function(x) regionCounts(x,MECP2_peaks.GR))
    MECP2_mCG_D3A.df = lapply(MECP2_mCG_D3A,getData)
    MECP2_mCG_D3A.df = lapply(MECP2_mCG_D3A.df, 
                              function(x) { x %>% 
                                            mutate(meth=numCs/coverage,
                                            ID = paste0(chr,'_',start,'_',end))})
    for(i in seq_along(MECP2_mCG_D3A.df)){
      colnames(MECP2_mCG_D3A.df[[i]])[8] = names(MECP2_mCG_D3A.df)[i]
    }

    merge(MECP2_mCG_D3A.df[[2]],MECP2_mCG_D3A.df[[4]],by='ID') %>% 
      dplyr::select(1,9,17) %>% melt() %>% 
      mutate(variable = factor(variable, 
                               labels = c('DNMT3a_WT','DNMT3a_cKO'))) %>% 
      ggplot(aes(x=variable,y=value))+
      geom_boxplot()+
      stat_compare_means(comparisons = list(c('DNMT3a_WT','DNMT3a_cKO')),
                         aes(label = ..p.signif..))+
      theme_test(20)+
      ylab("mCG/CG (MBHs)")+
      theme(axis.text.x = element_text(angle = 45,hjust=1,vjust=1))
    ggsave('Plots/mCG_on_MBHs_D3AWT_KO.pdf',height = 6,width = 3)

    merge(MECP2_mCG_D3A.df[[1]],MECP2_mCG_D3A.df[[3]],by='ID') %>% 
      dplyr::select(1,9,17) %>% melt() %>% 
      mutate(variable = factor(variable, 
                               labels = c('DNMT3a_WT','DNMT3a_cKO'))) %>% 
      ggplot(aes(x=variable,y=value))+
      geom_boxplot()+
      stat_compare_means(comparisons = list(c('DNMT3a_WT','DNMT3a_cKO')),
                         aes(label = ..p.signif..))+
      theme_test(20)+
      ylab("mCA/CA (MBHs)")+
      theme(axis.text.x = element_text(angle = 45,hjust=1,vjust=1))
    ggsave('Plots/mCA_on_MBHs_D3AWT_KO.pdf',height = 6,width = 3)
    ```

6.  **Supplementary Figure 2D.**

    ```{r,eval=FALSE,echo=TRUE}

    # Differential MECP2 binding on MBHS in DNMT3a cKO vs DNMT3a WT MEPC2 CUT&RUN 
    # Read CNR peaks summit files
    MECP2_CNR.noBlacklist.df = read.csv('results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_filtered.bed', sep='\t',header = F)
    dim(MECP2_CNR.noBlacklist.df)
    colnames(MECP2_CNR.noBlacklist.df) = c('Chr','Start','End','PeakID')

    # Convert to GRanges
    MECP2_CNR.noBlacklist.GR = MECP2_CNR.noBlacklist.df %>% GRanges()

    # Create SAF format
    MECP2_CNR.noBlacklist.df.saf = MECP2_CNR.noBlacklist.df %>% dplyr::select(c(4,1,2,3))
    MECP2_CNR.noBlacklist.df.saf$Strand = '*'
    colnames(MECP2_CNR.noBlacklist.df.saf) = c("GeneID","Chr","Start","End","Strand")


    # Read CUT&RUN samples bam files
    bams = dir("../CUT_and_RUN/results/bam/", 
                full.names = TRUE, pattern = "*[0-9].final.bam$")
    bams =  bams[!(grepl('IgG',bams))]
    MECP2.bams = bams[grepl('_Mecp2',bams)]

    # Extract raw reads mapped to MECP2 peaks
    MECP2.fcResults = featureCounts(MECP2.bams, 
                               annot.ext = MECP2_CNR.noBlacklist.df.saf,
                               isPairedEnd = TRUE,
                               countMultiMappingReads = FALSE,
                               maxFragLength = 100,nthreads = 15)
    myCounts = MECP2.fcResults$counts %>% as.data.frame() 


    # prepeare Metadata of KO and WT samples
    metaData = data.frame(Group=colnames(myCounts), row.names = colnames(myCounts))
    metaData$Group = c('MECP2_KO','WT','DNMT3A_KO','WT','MECP2_KO','WT','DNMT3A_KO','WT')
    rownames(metaData) = gsub('_CNR.*','',rownames(metaData))
    metaData$Sample = gsub('_Mecp2','',rownames(metaData))

    # change column names of count data based on metadta rownames
    colnames(myCounts) = rownames(metaData)

    # Run DESEq2
    MECP2_dds = DESeqDataSetFromMatrix(myCounts[,c(3,4,7,8)], 
                                        metaData[c(3,4,7,8),], ~Group)
    MECP2_dds = DESeq(MECP2_dds)

    # Extract variance stabilized transformed values
    MECP2_vst = vst(MECP2_dds)

    # PCA plot
    MECP2.PCA = plotPCA(MECP2_vst,intgroup=c('Group','Sample'),returnData=TRUE)
    percentVar = round(100 * attr(MECP2.PCA, "percentVar"))
    MECP2.PCA$Sample[4] = 'Adult_CTX_DNMT3AWT'

    ggplot(MECP2.PCA, aes(PC1, PC2, color=Group,shape=Sample)) + 
      geom_point(size=6,stroke = 2) +
      scale_shape_manual(values=1:8)+
      xlab(paste0("PC1: ",percentVar[1],"% variance")) +
      ylab(paste0("PC2: ",percentVar[2],"% variance")) +
      theme_test(20)


    # Extract differential MECP2 peaks
    DNMT3AKOvsWT = results(MECP2_dds,contrast=c("Group","DNMT3A_KO","WT"))
    DNMT3AKOvsWT.diff.peaks = DNMT3AKOvsWT %>% as.data.frame()

    DNMT3AKOvsWT.diff.peaks  = DNMT3AKOvsWT.diff.peaks %>% 
      mutate(DEG = case_when(log2FoldChange > 0 & pvalue < 0.1 ~ 'Up',
                             log2FoldChange < 0 & pvalue < 0.1  ~ 'Down',
                             pvalue >=0.1 | is.na(pvalue)  ~'No Change')) %>%
      mutate(DEG = factor(DEG,levels=c('Up','No Change','Down')))

    # plot MA plot
    ggplot(DNMT3AKOvsWT.diff.peaks)+
      geom_point(aes(y=log2FoldChange,x=log(baseMean),color=DEG),size=0)+
      scale_color_manual("Differential MECP2 peaks\n (DNMT3A KO vs WT)",
                         values=c('blue','grey','red'))+
      theme_test(15)+
      guides(colour = guide_legend(override.aes = list(size=2)))+
      geom_hline(yintercept = 0,linetype='dashed')+
      ylim(-6,2)+
      annotate("text", x = 5.7, y = -6, 
               label = DNMT3AKOvsWT.diff.peaks %>% 
                 dplyr::filter(DEG=='Down') %>% 
                 dim() %>% .[1], 
               color="red",size=4)+
      annotate("text", x = 5.7, y = 2,  
               label = DNMT3AKOvsWT.diff.peaks %>% 
                 dplyr::filter(DEG=='Up') %>% 
                 dim() %>% .[1], 
               color="blue",size=4)
    ggsave(filename = 'Plots/MECP2_in_DNMT3AKO_vs_WT_volcanoPlot.pdf',height = 4, width = 7,units = 'in')



    DNMT3AKOvsWT.diff.up.peaks = DNMT3AKOvsWT.diff.peaks %>% filter(DEG == 'Up')

    DNMT3AKOvsWT.diff.down.peaks = DNMT3AKOvsWT.diff.peaks %>% filter(DEG == 'Down')
      
    MECP2_CNR.noBlacklist.df.DNMT3AKOvsWT.unchanged.df = MECP2_CNR.noBlacklist.df %>% 
      dplyr::filter(!(PeakID %in% rownames(DNMT3AKOvsWT.diff.down.peaks ))) %>% 
      dplyr::filter(!(PeakID %in% rownames(DNMT3AKOvsWT.diff.up.peaks )))



    MECP2_CNR.noBlacklist.df.DNMT3AKOvsWT.up.df = MECP2_CNR.noBlacklist.df %>% 
                                                        dplyr::filter(PeakID %in% 
                                                                      rownames(DNMT3AKOvsWT.diff.up.peaks)) 
    write.table(MECP2_CNR.noBlacklist.df.DNMT3AKOvsWT.up.df, 
                file = "results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_filtered_DNMT3AKO_vs_WT.up.bed",
                sep='\t',quote = FALSE,row.names = F,col.names = F)

    MECP2_CNR.noBlacklist.df.DNMT3AKOvsWT.down.df = MECP2_CNR.noBlacklist.df %>% 
                                                        dplyr::filter(PeakID %in% 
                                                                      rownames(DNMT3AKOvsWT.diff.down.peaks)) 
    write.table(MECP2_CNR.noBlacklist.df.DNMT3AKOvsWT.down.df, 
                file = "results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_filtered_DNMT3AKO_vs_WT.down.bed",
                sep='\t',quote = FALSE,row.names = F,col.names = F)


    write.table(MECP2_CNR.noBlacklist.df.DNMT3AKOvsWT.unchanged.df, 
                file = "results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_filtered_DNMT3AKO_vs_WT.unchanged.bed",
                sep='\t',quote = FALSE,row.names = F,col.names = F)


    save(MECP2_CNR.noBlacklist.df,
         MECP2_CNR.noBlacklist.GR,
         MECP2_CNR.noBlacklist.df.saf,
         MECP2_dds,
         MECP2_vst,
         WTvsMECP2KO,
         DNMT3AKOvsWT,
         fcResults,file = "results/RData/MECP2_D3A_KOvsWT.RData")
    ```

7.  **Supplementary Figure 2I.**

    ```{r,echo=TRUE,eval=FALSE}

    # Read MECP2 peaks overlapping with gain and loss in DNMT3A KO final peaks
    MEP2_peakList = list.files("results/MECP2/",pattern = "MECP2_u.*.noBlacklist.bed",full.names = TRUE)
    MEP2_peakListNames = gsub('.noBlacklist.bed','',basename(MEP2_peakList))
    MEP2_peakList = lapply(MEP2_peakList, function(x) {read.csv(x,sep = '\t',header = F)})
    newColnames = c('Chr','Start','End')
    MEP2_peakList = lapply(MEP2_peakList, setNames, newColnames)
    names(MEP2_peakList) = MEP2_peakListNames
    MEP2_peakList.GR = lapply(MEP2_peakList, function(x) {GRanges(x)})


    # mCA over Diff MECP2 peaks (DNMT3A KO vs WT)
    MECP2_mCA_mCG_GC = list()

    MEP2_peakList.GR_CTX_CA_meth = lapply(MEP2_peakList.GR,function(x) regionCounts(CTX_CA,x))
    MEP2_peakList.GR_CTX_CA_meth.df = lapply(MEP2_peakList.GR_CTX_CA_meth,getData)[c(1:5)]
    MEP2_peakList.GR_CTX_CA_meth.df = lapply(MEP2_peakList.GR_CTX_CA_meth.df, 
                                             function(x) { x %>% mutate(meth=numCs/coverage)})
    names(MEP2_peakList.GR_CTX_CA_meth.df) = MEP2_peakListNames

    MECP2_mCA_mCG_GC[[1]] = do.call(rbind, MEP2_peakList.GR_CTX_CA_meth.df) %>% 
      rownames_to_column('Group') %>% 
      mutate(Group=gsub('\\.[0-9]*','',Group)) %>% 
      mutate(MECP2 = factor(case_when(
        Group == 'MECP2_unchaged_DNMT3AKO_vs_WT' ~ 'No change',
        Group %in% c('MECP2_up_DNMT3AKO_vs_WT','MECP2_up_unique_DNMT3AKO_vs_WT')~ 'gain',
        Group %in% c('MECP2_up_DNMT3AWT_vs_KO','MECP2_up_unique_DNMT3AWT_vs_KO')~'loss'),
                            levels = c('gain','No change','loss'))) %>% 
      ggplot(aes(x=MECP2,y=meth))+geom_boxplot() +
      stat_compare_means(comparisons = list(c('No change','gain'),
                                            c('gain','loss'),
                                            c('No change','loss'))) +
      ggtitle('mCA')+
      ylab('mCA')+
      xlab('MBHs (DNMT3A KO vs WT)')+
      theme_test(20)+
      theme(axis.text.x = element_text(angle = 45,vjust = 1,hjust = 1))


    # mCG over Diff MECP2 peaks (DNMT3A KO vs WT)
    MEP2_peakList.GR_CTX_CG_meth = lapply(MEP2_peakList.GR,function(x) regionCounts(CTX_CG,x))
    MEP2_peakList.GR_CTX_CG_meth.df = lapply(MEP2_peakList.GR_CTX_CG_meth,getData)[c(1:5)]
    MEP2_peakList.GR_CTX_CG_meth.df = lapply(MEP2_peakList.GR_CTX_CG_meth.df, 
                                             function(x) { x %>% mutate(meth=numCs/coverage)})
    names(MEP2_peakList.GR_CTX_CG_meth.df) = MEP2_peakListNames

    MECP2_mCA_mCG_GC[[2]] = do.call(rbind, MEP2_peakList.GR_CTX_CG_meth.df) %>% 
      rownames_to_column('Group') %>% 
      mutate(Group=gsub('\\.[0-9]*','',Group)) %>% 
      #mutate(MECP2 = ifelse(Group %in% names(MEP2_peakList.GR_CTX_CA_meth.df)[c(1,2,4)],'high','low')) %>%
      #ggplot(aes(x=MECP2,y=meth))+geom_boxplot() +
      #stat_compare_means(comparisons = list(c('high','low')))+
      #scale_x_discrete(name = '',labels=c("Increased \nMECP2 binding\n(DNMT3A KO)","Decreased \nMECP2 binding\n(DNMT3A KO)"))+
      mutate(MECP2 = factor(case_when(Group == 'MECP2_unchaged_DNMT3AKO_vs_WT' ~ 'No change',
          Group %in% c('MECP2_up_DNMT3AKO_vs_WT','MECP2_up_unique_DNMT3AKO_vs_WT')~ 'gain',
          Group %in% c('MECP2_up_DNMT3AWT_vs_KO','MECP2_up_unique_DNMT3AWT_vs_KO')~'loss'),
                            levels = c('gain','No change','loss'))) %>% #head()
      ggplot(aes(x=MECP2,y=meth))+geom_boxplot() +
      stat_compare_means(comparisons = list(c('No change','gain'),
                                            c('gain','loss'),
                                            c('No change','loss'))) +
      
      ggtitle('mCG')+
      ylab('mCG')+
      xlab('MBHs (DNMT3A KO vs WT)')+
      theme_test(20)+
      theme(axis.text.x = element_text(angle = 45,vjust = 1,hjust = 1))

    pdf("Plots/mCA_CG_GC_on_MECP2_peaks.pdf",height = 10,width = 12)
    do.call("grid.arrange",c(MECP2_mCA_mCG_GC,ncol=2))
    dev.off()
    ```

8.  **Supplementary Figure 2I.**

    ```{r,echo=TRUE,eval=FALSE}

    D3A_BSseq_methylRaw_repMerged.list = readRDS("results/RData/GSE103214_BSseq_Cortex_10wk_repMerged_mm10.RDS")
    MECP2_mCG_D3A = list()

    MECP2_mCG_D3A = lapply(D3A_BSseq_methylRaw_repMerged.list,function(x) regionCounts(x,MECP2_peaks.GR))
    MECP2_mCG_D3A.df = lapply(MECP2_mCG_D3A,getData)
    MECP2_mCG_D3A.df = lapply(MECP2_mCG_D3A.df, function(x) { 
      x %>% mutate(meth=numCs/coverage,
             ID = paste0(chr,'_',start,'_',end))})
    for(i in seq_along(MECP2_mCG_D3A.df)){
      colnames(MECP2_mCG_D3A.df[[i]])[8] = names(MECP2_mCG_D3A.df)[i]
    }


    merge(MECP2_mCG_D3A.df[[2]],MECP2_mCG_D3A.df[[4]],by='ID') %>% 
      dplyr::select(1,2,3,4,9,17) %>% 
      filter(GSM2757476_Dnmt3aWT_Cortex_BS_10wk_CG >0.3 & GSM2757478_Dnmt3acKO_Cortex_BS_10wk_CG <0.1) %>%
      merge(.,MECP2_mCG_D3A.df[[1]],by='ID') %>% 
      merge(.,MECP2_mCG_D3A.df[[3]],by='ID') %>%
      dplyr::select(1,5,6,14,22) %>%  melt() %>% 
      mutate(methylation = case_when(grepl('CG',variable)~'mCG/CG',
                                     grepl('CA',variable)~'mCA/CA'),
             genotype = case_when(grepl('Dnmt3aWT',variable)~'DNMT3A_WT',
                                  grepl('Dnmt3acKO',variable)~'DNMT3A_cKO')) %>% 
      mutate(genotype = factor(genotype, levels = c('DNMT3A_WT','DNMT3A_cKO'))) %>% 
      ggplot(aes(x=genotype,y=value))+
      geom_boxplot()+
      stat_compare_means(comparisons = list(c('DNMT3A_WT','DNMT3A_cKO')),aes(label = ..p.signif..))+
      facet_wrap(~methylation,scales = 'free_y')+
      theme_test(20)+
      theme(axis.text.x = element_text(angle = 45,hjust=1,vjust=1))
    ggsave('Plots/MECP2_peaks_with_diff_mCG_D3AKO_vs_WT.pdf',height = 6,width = 6)

    merge(MECP2_mCG_D3A.df[[2]],MECP2_mCG_D3A.df[[4]],by='ID') %>% 
      dplyr::select(1,2,3,4,9,17) %>% 
      filter(GSM2757476_Dnmt3aWT_Cortex_BS_10wk_CG >0.3 & GSM2757478_Dnmt3acKO_Cortex_BS_10wk_CG <0.1) %>%
      write.table(.[,c(2:4)],file = 'results/MECP2/MECP2_peaks_with_diff_mCG_D3AKO_vs_WT.bed',
                  quote = FALSE,sep = '\t',row.names = FALSE,col.names = FALSE)


    ```

### **Figure 3: MECP2 modulates enhancer activity at MBH sites.**

1.  **Supplementary Figure 3A.**

    ```{r,echo=TRUE,eval=FALSE}

    # read 8wk cortex encode data from UCSC
    encode_cortex = list.files("data/ENCODE",pattern = "*.broadPeak.bed.mm10.bed",full.names = TRUE)
    names(encode_cortex) = c("H3K27ac","H3K4me1","H3K4me3","CTCF","POLR2A")

    # read 8wk cortex encode data from Stroud et al
    stroud_cortex = list.files("data/Stroud_2017_Cell_data/",
                               pattern = "*.mm10noChrM.bed$",full.names = TRUE)
    names(stroud_cortex) = c("H3K27me3","H3K9me3")

    cortex = c(encode_cortex,stroud_cortex)
    names(cortex) = paste0(names(cortex), "_Adult.cortex")

    encode_forebrain = list.files("data/ENCODE",pattern = "*_brain.*.bed|*forebrain.*.bed",
                                  full.names = TRUE)

    encode_histone_Metadta = read.csv("data/ENCODE/Histone_brain_mm10_ENCODE_experiment_report.tsv",
                                      sep = "\t",skip = 1) 
    encode_TF_Metadta = read.csv("data/ENCODE/TFs_experiment_report_2024_4_10_17h_45m.tsv",
                                 sep = "\t",skip = 1) 
    encode_metadata = rbind(encode_TF_Metadta,encode_histone_Metadta)

    for (i in 1:length(encode_forebrain)){
      id = gsub('.*_ChIP-seq_.*brain_|.bed','',basename(encode_forebrain[i]))
      sampleName = encode_metadata %>% filter(grepl(id,Files)) %>% 
        dplyr::select("Target.of.assay","Life.stage","Biosample.age") %>% 
        mutate(group = paste0(Target.of.assay,'_',Life.stage,'(',Biosample.age,')')) %>% pull(group)
      print(sampleName)
      names(encode_forebrain)[i] = sampleName
    }

    # read MECP2 peaks
    mecp2  = "results/MECP2/MECP2WT.vs.KO_overlap_MECP2WT.vs.IgG.noBlacklist_filtered_chr1to19XY.bed"
    MECP2_peaks.GR = readPeakFile(mecp2)

    # my target 
    target = c(cortex,encode_forebrain)
    GR = GRangesList(lapply(target, readPeakFile))

    # chromosome length
    chrLen = read.csv("data/mm10/mm10.chrom.sizes",sep = "\t",header = F) %>% 
      filter(V1 %in% c(paste0('chr',1:19),"chrX","chrY"))
    chrLen.vec = chrLen$V2
    names(chrLen.vec) = chrLen$V1

    GR.mecp2_overlap = list()
    GR.mecp2_overlap.test = list()


    pn.area = 100
    pn.dist = 100
    pn.jacc = 100

    GR.mecp2_overlap.test = mclapply(GR,mc.cores = 45,function(x){
      GenometriCorrelation(MECP2_peaks.GR, x, chromosomes.length = chrLen.vec,
                           permut.number = 0, keep.distributions = TRUE, 
                           showProgressBar = TRUE,awhole.only=TRUE,
                           ecdf.area.permut.number = pn.area,
                           mean.distance.permut.number = pn.dist,
                           jaccard.measure.permut.number = pn.jacc)
    })


    for (i in 1:length(GR.mecp2_overlap.test)){
      test1 = unlist(GR.mecp2_overlap.test[[i]]$awhole)
      GR.mecp2_overlap[[i]] = test1 %>% as.data.frame() %>% 
        rownames_to_column('param') %>% 
        filter(!(grepl(".data|null",param))) 
      colnames(GR.mecp2_overlap[[i]])[2] = names(target)[i]
    }

    # generate graph
    for (i in 1:length(GR.mecp2_overlap.test)){
    graphical.report(GR.mecp2_overlap.test[[i]],
                     pdffile = paste0("results/ENCODE/ENCODE_MECP2_overlap_GenometricCorr_",
                                      names(GR.mecp2_overlap.test)[i],".pdf"), 
                     show.all = TRUE)
    }
    GR.mecp2_overlap

    # change 2nd column name
    for (i in 1:length(GR.mecp2_overlap)){
      colnames(GR.mecp2_overlap[[1]])[2] = "value"
    }

    names(GR.mecp2_overlap) = names(GR)


    rbindlist(GR.mecp2_overlap,idcol = "Group") %>% 
      dcast(Group~param,value.var = "value") %>% 
      write.table("results/ENCODE/ENCODE_MECP2_overlap_GenometricCorr_stats.tsv",
                  sep = "\t",row.names = FALSE,quote = FALSE)


    jaccard = rbindlist(GR.mecp2_overlap,idcol = "Group") %>% 
      dcast(Group~param,value.var = "value") %>% 
      dplyr::select(1,3,5)

    jaccard = jaccard %>% separate(Group,c('Factor','tissue'),sep = "_") %>% 
      mutate(jaccard.measure.test.direction = ifelse(jaccard.measure.test.direction == 'attraction', 
                                                     '*','*')) 
    jaccard$jaccard.measure = as.numeric(jaccard$jaccard.measure)

    jaccard_index = dcast(jaccard,
                          formula = Factor~tissue,value.var = "jaccard.measure") %>% 
      column_to_rownames("Factor") %>% 
      dplyr::select(2:8,9,1)

    jaccard_direction= dcast(jaccard,
                             formula = Factor~tissue,
                             value.var = "jaccard.measure.test.direction") %>% 
      column_to_rownames("Factor") %>% 
      dplyr::select(2:8,9,1)

    jaccard_direction[is.na(jaccard_direction)] = " "

    pdf("Plots/ENCODE_dataOverlap_with_MECP2.pdf",height = 4,width = 6)
    draw(Heatmap(jaccard_index,name = "Jaccard measure",
                 cluster_columns = FALSE,
                 cluster_rows = TRUE,
                 rect_gp = gpar(col = "black"),
                 column_names_side = "top",
                 column_names_rot = 30,
                 column_names_gp = gpar(fontsize = 8),
                 row_names_gp = gpar(fontsize = 8)),
                 #cell_fun = function(j, i, x, y, width, height, fill) {
                 #  grid.text(jaccard_direction[i, j], x, y, gp = gpar(fontsize = 12))},
         heatmap_legend_side="right")
    dev.off()

    save(GR.mecp2_overlap,GR.mecp2_overlap.test,
         file = "results/RData/MECP2_ENCODE_geometricCorr.RData")
    ```

2.  **Supplementary Figure 3B ( All H3K27ac peaks).**

    ```{r,echo=TRUE,eval=FALSE}

    # Read H3K27ac CNR peaks summit files
    CNR_peaks_file = list.dirs("../CUT_and_RUN/results/macs2_Callpeak/")[!(grepl('tag|_macs2|_Macs2',list.dirs("../CUT_and_RUN/results/macs2_Callpeak/")))][-1]
    CNR_peak_summit_files = lapply(CNR_peaks_file, 
                                   function(x) paste0(x,"/",basename(x), "_summits.bed")) %>% unlist()
    CNR_peak_summit.bed = lapply(CNR_peak_summit_files, import.bed)

    CNR_filename = basename(CNR_peaks_file)
    CNR_filename = gsub('_CNR_.*','',CNR_filename)
    names(CNR_peak_summit.bed) = CNR_filename

    # Extend 500bp up and downstream to peak Summit
    CNR_peak_summit.pm500.bed = lapply(CNR_peak_summit.bed, resize ,width = 500,fix = 'center')


    # Filter H3K27ac CNR data
    H3K27ac_CNR.GR = CNR_peak_summit.pm500.bed[grepl('_H3K27ac',names(CNR_peak_summit.pm500.bed))]
    H3K27ac_CNR.GR = H3K27ac_CNR.GR[grepl('MECP2WT',names(H3K27ac_CNR.GR))]
    H3K27ac_CNR.df = lapply(H3K27ac_CNR.GR, function(x) x |> as.data.frame()) 

    H3K27ac_CNR.df = do.call(rbind,H3K27ac_CNR.df) %>% 
      filter(score >4) %>% 
      dplyr::select(1:3,5)
    colnames(H3K27ac_CNR.df) = c('chr','start','end','strand')
    H3K27ac_CNR_filtered.GR = H3K27ac_CNR.df %>% GRanges() %>% GenomicRanges::reduce()

    GR.colnames = c('chr','start','end')
    mm10.blacklisted.Regions = read.csv("../CUT_and_RUN/data/mm10/mm10.blacklist.bed",
                                        sep = '\t',header = F) %>% 
      rename_with(~GR.colnames) %>% 
      GRanges()

    H3K27ac_CNR_filtered.GR.noBlacklist = subsetByOverlaps(H3K27ac_CNR_filtered.GR, 
                                                           mm10.blacklisted.Regions, invert = TRUE)
    H3K27ac_CNR_filtered.GR.noBlacklist.df = as.data.frame(H3K27ac_CNR_filtered.GR.noBlacklist) %>% 
      mutate(PeakID=paste0('Peak',row_number())) 
    write.table(file = "results/H3K27ac/H3K27ac_MECP2WT_filtered_peaks.bed",
                H3K27ac_CNR_filtered.GR.noBlacklist.df[,c(1:3,6)],sep='\t',
                quote = FALSE,row.names = F,col.names = F)

    # create SAF format
    H3K27ac_CNR.noBlacklist.df.saf = H3K27ac_CNR_filtered.GR.noBlacklist.df %>% dplyr::select(c(6,1,2,3))
    H3K27ac_CNR.noBlacklist.df.saf$Strand = '*'
    colnames(H3K27ac_CNR.noBlacklist.df.saf) = c("GeneID","Chr","Start","End","Strand")

    # List alignment files
    bams = dir("../CUT_and_RUN/results/", full.names = TRUE, pattern = "*.final.bam")
    bams =  bams[!(grepl('IgG',bams))]


    bams = dir("../CUT_and_RUN/results/bam/", full.names = TRUE, pattern = "*.final.bam")
    bams =  bams[!(grepl('IgG|.bai|.sort',bams))]

    H3K27ac.bams = bams[grepl('_H3K27ac',bams)][-1]
    #bamsToCount = subset(bamsToCount,!grepl("*_2h*", bamsToCount))
    H3K27ac.fcResults = featureCounts(H3K27ac.bams, 
                                       annot.ext = H3K27ac_CNR.noBlacklist.df.saf,
                                       isPairedEnd = TRUE,
                                       countMultiMappingReads = FALSE,
                                       maxFragLength = 100,nthreads = 15)

    save(H3K27ac.fcResults,file = "results/H3K27ac/H3K27ac.RData")


    H3K27ac.myCounts = H3K27ac.fcResults$counts %>% as.data.frame() 

    # Metadata
    H3K27ac.metaData = data.frame(Group=colnames(H3K27ac.myCounts), 
                                  row.names = colnames(H3K27ac.myCounts))
    H3K27ac.metaData$Group = c('MECP2_KO','WT','DNMT3A_KO','WT',
                               'MECP2_KO','WT','DNMT3A_KO','WT')
    H3K27ac.metaData$Batch = rownames(H3K27ac.metaData)
    rownames(H3K27ac.metaData) = gsub('_CNR_.*','',rownames(H3K27ac.metaData))
    H3K27ac.metaData$Sample = gsub('_H3K27ac','',rownames(H3K27ac.metaData))
    H3K27ac.metaData$Batch = gsub('.*_CTX_.*_CNR_|.final.bam','',H3K27ac.metaData$Batch)
    H3K27ac.metaData$Sample = gsub('_Mecp2','',rownames(H3K27ac.metaData))

    colnames(H3K27ac.myCounts) = rownames(H3K27ac.metaData)

    # # Select only MECP2 WT and KO samples
    y = DGEList(counts = H3K27ac.myCounts[,c(1,2,5,6)])

    y$samples$Group = H3K27ac.metaData[c(1,2,5,6),]$Group
    y$samples$Batch = H3K27ac.metaData[c(1,2,5,6),]$Batch
    y$samples$Sample = H3K27ac.metaData[c(1,2,5,6),]$Sample

    # Normalize and obtain logcounts for QC
    y = calcNormFactors(y)
    logCPMs = cpm(y, log = TRUE)


    # Calculate rowwise variance
    rv = apply(logCPMs, 1, var)

    # Sort decreasingly and take top 1000
    o = order(rv, decreasing=TRUE)
    top1000 = head(o, 1000)

    # From the logCPMs subset for the top-1000
    logCPM_top1000 = logCPMs[top1000,]

    # Run PCA
    pca = prcomp(t(logCPM_top1000))

    # Combine PCA coordinates with the metadata from the DGEList
    to_plot = data.frame(pca$x, y$samples)

    # Calculate how many % of total variance is explained by each principal component
    percentVar = pca$sdev^2 / sum( pca$sdev^2 )*100

    # We focus here on PC1 and PC2
    use.pcs = c(1,2)
    labs = paste0(paste0("PC", use.pcs, " - "), 
                   paste0("Var.expl = ", round(percentVar[use.pcs], 2), "%"))

    ggplot(to_plot, aes(x=PC1, y=PC2, color=Group, shape=Sample)) + 
      geom_point(size=3) +
      scale_shape_manual(values=1:8)+
      xlab(labs[1]) + ylab(labs[2])

    # correct for the Batch 
    batch = factor(y$samples$Batch)

    logCPMs_corrected = limma::removeBatchEffect(logCPMs, batch = batch)

    # repeat PCA as before, using the same genes
    logCPM_corrected_top1000 = logCPMs_corrected[top1000,]

    # Run PCA
    pca = prcomp(t(logCPM_corrected_top1000))

    # Combine PCA coordinates with the metadata from the DGEList
    to_plot = data.frame(pca$x, y$samples)

    # Calculate how many % of total variance is explained by each principal component
    percentVar = pca$sdev^2 / sum( pca$sdev^2 )*100

    # We focus here on PC1 and PC2
    use.pcs = c(1,2)
    labs = paste0("PC", use.pcs, " - ",round(percentVar[use.pcs], 2), "%")

    ggplot(to_plot, aes(x=PC1, y=PC2, color=Group, shape=Sample)) + 
      geom_point(size=5,stroke = 1.8) +
      scale_shape_manual(values=1:8)+
      xlab(labs[1]) + ylab(labs[2]) +
      theme_test(10) +
      guides(colour = guide_legend(override.aes = list(size=2)))+
      ggtitle("PCA") 
    ggsave("Plots/H3K27ac_MECP2KO_vs_WT_PCA.pdf",units = 'cm',height = 8,width = 14)



    # Include Batch in the design matrix
    design = model.matrix(~Batch+Group, y$samples)

    # QLF workflow from edgeR
    y = estimateDisp(y, design)
    fit = glmQLFit(y, design)

    # include column (factor) for which differential enhancer need to tested
    fit  = glmQLFTest(fit, coef = 3)

    tt = topTable(fit, coef=3)  %>% rownames_to_column('Gene')
    cp = cpm(y) %>% as.data.frame() %>% rownames_to_column('Gene')

    #/ 1/2 is "A" (=the reference) and 3/4 is "B", positive logFC mean higher in B,
    merge(x=tt, y=cp, by="Gene")[2,c(1,2,8,9,10,11)]

    # get stats as a data.frame
    DiffEnhacer = data.frame(topTags(fit, n=Inf))

    # Classify enhancer into significantly up and down
    DiffEnhancer.mod = DiffEnhacer %>% 
      mutate(Diff_H3K27ac=factor(case_when(logFC>0 & FDR<0.1 & logCPM > 2 ~ "Up",
                                           logFC<0 & FDR<0.1 & logCPM > 2 ~ "Down",
                                           TRUE ~ "not significant"),
                                 levels=c("Up", "not significant", "Down")))

    # MA-plot
    ggplot(DiffEnhancer.mod %>% filter(Diff_H3K27ac != 'not significant'), 
           aes(x=logCPM, y=logFC, color=Diff_H3K27ac)) +
      geom_point(size=0) +
      scale_color_manual(values=c( "blue","red")) +
      ggtitle("H3K27ac (MECP2 WT vs KO)") +
      theme_test(15) +
      guides(colour = guide_legend(override.aes = list(size=2)))+
      geom_vline(xintercept = 2,linetype = 'dashed')+
      annotate("text", x = 6.5, y = -1, 
               label = DiffEnhancer.mod %>% 
                 dplyr::filter(Diff_H3K27ac=='Down') %>% 
                 dim() %>% .[1], color="red",size=4)+
      annotate("text", x = 6.5, y = 1,  
               label = DiffEnhancer.mod %>% 
                 dplyr::filter(Diff_H3K27ac=='Up') %>% 
                 dim() %>% .[1], color="blue",size=4)+
      ylab('logFC (MECP2 WT vs KO)')
    ggsave("Plots/H3K27ac_MECP2WT_vs_KO.pdf",units = 'cm',height = 10,width = 14)


    # Filter Enahncer based on logCPM value
    Enhancer.Up_in_MECP2.KO  = DiffEnhancer.mod %>% filter(logCPM >2 & Diff_H3K27ac == 'Up')
    Enhancer.Down_in_MECP2.KO  = DiffEnhancer.mod %>% filter(logCPM >2 & Diff_H3K27ac == 'Down')
    Enhancer.Unchanged_in_MECP2.KO  = DiffEnhancer.mod %>% filter(logCPM >2 & Diff_H3K27ac == 'not significant')

    H3K27ac_CNR_filtered.GR.noBlacklist.df %>% 
      filter(PeakID %in% rownames(Enhancer.Up_in_MECP2.KO)) %>% 
      dplyr::select(1:3,6) %>%
      write.table(file = "results/H3K27ac/H3K27ac_up_MECP2WT.vs.KO.bed",sep='\t',
                  quote = FALSE,row.names = F,col.names = F)

    H3K27ac_CNR_filtered.GR.noBlacklist.df %>% 
      filter(PeakID %in% rownames(Enhancer.Down_in_MECP2.KO)) %>% 
      dplyr::select(1:3,6) %>%
      write.table(file = "results/H3K27ac/H3K27ac_down_MECP2WT.vs.KO.bed",sep='\t',
                  quote = FALSE,row.names = F,col.names = F)

    H3K27ac_CNR_filtered.GR.noBlacklist.df %>% 
      filter(PeakID %in% rownames(Enhancer.Unchanged_in_MECP2.KO)) %>% 
      dplyr::select(1:3,6) %>%
      write.table(file = "results/H3K27ac/H3K27ac_unchanged_MECP2WT.vs.KO.bed",sep='\t',
                  quote = FALSE,row.names = F,col.names = F)
    ```

3.  **Supplementary Figure 3B ( MECP2-H3K27ac overlapping peaks).**

    ```{r,echo=TRUE,eval=FALSE}

    # Read CNR peaks summit files

    CNR_peaks_file = list.dirs("../CUT_and_RUN/results/macs2_Callpeak/")[!(grepl('tag|_macs2|_Macs2',list.dirs("../CUT_and_RUN/results/macs2_Callpeak/")))][-1]
    CNR_peak_summit_files = lapply(CNR_peaks_file, function(x) paste0(x,"/",basename(x), "_summits.bed")) %>% unlist()
    CNR_peak_summit.bed = lapply(CNR_peak_summit_files, import.bed)

    CNR_filename = basename(CNR_peaks_file)
    CNR_filename = gsub('_CNR_.*','',CNR_filename)
    names(CNR_peak_summit.bed) = CNR_filename

    # Extend 500bp up and downstream to peak Summit
    CNR_peak_summit.pm500.bed <- lapply(CNR_peak_summit.bed, resize ,width = 500,fix = 'center')


    # Filter H3K27ac CNR data
    H3K27ac_CNR.GR = CNR_peak_summit.pm500.bed[grepl('_H3K27ac',names(CNR_peak_summit.pm500.bed))]
    H3K27ac_CNR.GR = H3K27ac_CNR.GR[grepl('MECP2WT',names(H3K27ac_CNR.GR))]
    H3K27ac_CNR.df = lapply(H3K27ac_CNR.GR, function(x) x |> as.data.frame()) 

    H3K27ac_CNR.df = do.call(rbind,H3K27ac_CNR.df) %>% filter(score >4) %>% dplyr::select(1:3,5)
    colnames(H3K27ac_CNR.df) = c('chr','start','end','strand')
    H3K27ac_CNR_filtered.GR = H3K27ac_CNR.df %>% GRanges() %>% GenomicRanges::reduce()

    GR.colnames = c('chr','start','end')
    mm10.blacklisted.Regions = read.csv("../CUT_and_RUN/data/mm10/mm10.blacklist.bed",sep = '\t',header = F) %>% 
      rename_with(~GR.colnames) %>% 
      GRanges()

    H3K27ac_CNR_filtered.GR.noBlacklist = subsetByOverlaps(H3K27ac_CNR_filtered.GR, mm10.blacklisted.Regions, invert = TRUE)
    H3K27ac_CNR_filtered.GR.noBlacklist.df = as.data.frame(H3K27ac_CNR_filtered.GR.noBlacklist) %>% 
      mutate(PeakID=paste0('Peak',row_number())) 
    write.table(file = "results/H3K27ac/H3K27ac_MECP2WT_filtered_peaks.bed",
                H3K27ac_CNR_filtered.GR.noBlacklist.df[,c(1:3,6)],sep='\t',
                quote = FALSE,row.names = F,col.names = F)

    # Overlap "results/H3K27ac/H3K27ac_MECP2WT_filtered_peaks.bed" with MECP2 peaks using bedtools
    # to extract overlapping peaks

    H3K27ac_CNR_filtered.GR.noBlacklist.df = read.csv('results/MECP2_H3K27ac_overlap/MECP2WT_H3K27ac_peakOverlap/MECP2_H3K27ac_overlap.bed',
                           sep='\t',header = F)
    H3K27ac_CNR_filtered.GR.noBlacklist.df$GeneID= paste0(H3K27ac_CNR_filtered.GR.noBlacklist.df$V1,'_',
                                                         H3K27ac_CNR_filtered.GR.noBlacklist.df$V2,'_',
                                                         H3K27ac_CNR_filtered.GR.noBlacklist.df$V3)

    H3K27ac_CNR.noBlacklist.df.saf = H3K27ac_CNR_filtered.GR.noBlacklist.df %>% dplyr::select(c(4,1,2,3))
    H3K27ac_CNR.noBlacklist.df.saf$Strand = '*'

    colnames(H3K27ac_CNR.noBlacklist.df.saf) = c("GeneID","Chr","Start","End","Strand")

    bams = dir("../CUT_and_RUN/results/", full.names = TRUE, pattern = "*.final.bam")
    bams =  bams[!(grepl('IgG',bams))]


    bams = dir("../CUT_and_RUN/results/bam/", full.names = TRUE, pattern = "*.final.bam")
    bams =  bams[!(grepl('IgG|.bai|.sort',bams))]

    H3K27ac.bams = bams[grepl('_H3K27ac',bams)][-1]
    #bamsToCount = subset(bamsToCount,!grepl("*_2h*", bamsToCount))
    H3K27ac.fcResults = featureCounts(H3K27ac.bams, 
                                       annot.ext = H3K27ac_CNR.noBlacklist.df.saf,
                                       isPairedEnd = TRUE,
                                       countMultiMappingReads = FALSE,
                                       maxFragLength = 100,nthreads = 15)

    #save(H3K27ac.fcResults,file = "results/H3K27ac/H3K27ac.RData")

    #load("results/H3K27ac/H3K27ac.RData",verbose = TRUE)

    H3K27ac.myCounts = H3K27ac.fcResults$counts %>% as.data.frame() 


    # Metadata
    H3K27ac.metaData = data.frame(Group=colnames(H3K27ac.myCounts), row.names = colnames(H3K27ac.myCounts))
    H3K27ac.metaData$Group = c('MECP2_KO','WT','DNMT3A_KO','WT','MECP2_KO','WT','DNMT3A_KO','WT')
    H3K27ac.metaData$Batch = rownames(H3K27ac.metaData)
    rownames(H3K27ac.metaData) = gsub('_CNR_.*','',rownames(H3K27ac.metaData))
    H3K27ac.metaData$Sample = gsub('_H3K27ac','',rownames(H3K27ac.metaData))
    H3K27ac.metaData$Batch = gsub('.*_CTX_.*_CNR_|.final.bam','',H3K27ac.metaData$Batch)
    H3K27ac.metaData$Sample = gsub('_Mecp2','',rownames(H3K27ac.metaData))

    colnames(H3K27ac.myCounts) = rownames(H3K27ac.metaData)

    # # Select only MECP2 WT and KO samples
    y = DGEList(counts = H3K27ac.myCounts[,c(1,2,5,6)])

    y$samples$Group = H3K27ac.metaData[c(1,2,5,6),]$Group
    y$samples$Batch = H3K27ac.metaData[c(1,2,5,6),]$Batch
    y$samples$Sample = H3K27ac.metaData[c(1,2,5,6),]$Sample

    # Normalize and obtain logcounts for QC
    y = calcNormFactors(y)
    logCPMs = cpm(y, log = TRUE)


    # Calculate rowwise variance
    rv = apply(logCPMs, 1, var)

    # Sort decreasingly and take top 1000
    o = order(rv, decreasing=TRUE)
    top1000 = head(o, 1000)

    # From the logCPMs subset for the top-1000
    logCPM_top1000 = logCPMs[top1000,]

    # Run PCA
    pca = prcomp(t(logCPM_top1000))

    # Combine PCA coordinates with the metadata from the DGEList
    to_plot = data.frame(pca$x, y$samples)

    # Calculate how many % of total variance is explained by each principal component
    percentVar = pca$sdev^2 / sum( pca$sdev^2 )*100

    # We focus here on PC1 and PC2
    use.pcs = c(1,2)
    labs = paste0(paste0("PC", use.pcs, " - "), paste0("Var.expl = ", round(percentVar[use.pcs], 2), "%"))

    ggplot(to_plot, aes(x=PC1, y=PC2, color=Group, shape=Sample)) + 
      geom_point(size=3) +
      scale_shape_manual(values=1:8)+
      xlab(labs[1]) + ylab(labs[2])

    # correct for the Batch 
    batch = factor(y$samples$Batch)

    logCPMs_corrected = limma::removeBatchEffect(logCPMs, batch = batch)

    # repeat PCA as before, using the same genes
    logCPM_corrected_top1000 = logCPMs_corrected[top1000,]

    # Run PCA
    pca = prcomp(t(logCPM_corrected_top1000))

    # Combine PCA coordinates with the metadata from the DGEList
    to_plot = data.frame(pca$x, y$samples)

    # Calculate how many % of total variance is explained by each principal component
    percentVar = pca$sdev^2 / sum( pca$sdev^2 )*100

    # We focus here on PC1 and PC2
    use.pcs = c(1,2)
    labs = paste0("PC", use.pcs, " - ",round(percentVar[use.pcs], 2), "%")

    ggplot(to_plot, aes(x=PC1, y=PC2, color=Group, shape=Sample)) + 
      geom_point(size=5,stroke = 1.8) +
      scale_shape_manual(values=1:8)+
      xlab(labs[1]) + ylab(labs[2]) +
      theme_test(10) +
      guides(colour = guide_legend(override.aes = list(size=2)))+
      ggtitle("PCA") 
    ggsave("Plots/H3K27ac_MECP2KO_vs_WT_PCA.pdf",units = 'cm',height = 8,width = 14)



    # Include Batch in the design matrix
    design = model.matrix(~Batch+Group, y$samples)

    # QLF workflow from edgeR
    y = estimateDisp(y, design)
    fit = glmQLFit(y, design)

    # include column (factor) for which differential enhancer need to tested
    fit  = glmQLFTest(fit, coef = 3)

    tt = topTable(fit, coef=3)  %>% rownames_to_column('Gene')
    cp = cpm(y) %>% as.data.frame() %>% rownames_to_column('Gene')

    #/ 1/2 is "A" (=the reference) and 3/4 is "B", positive logFC mean higher in B,
    merge(x=tt, y=cp, by="Gene")[2,c(1,2,8,9,10,11)]

    # get stats as a data.frame
    DiffEnhacer = data.frame(topTags(fit, n=Inf))

    # Classify enhancer into significantly up and down
    DiffEnhancer.mod = DiffEnhacer %>% 
      mutate(Diff_H3K27ac=factor(case_when(logFC>0 & FDR<0.1 & logCPM > 2 ~ "Up",
                                           logFC<0 & FDR<0.1 & logCPM > 2 ~ "Down",
                                           TRUE ~ "not significant"),
                                 levels=c("Up", "not significant", "Down")))

    # MA-plot
    ggplot(DiffEnhancer.mod,# %>% filter(Diff_H3K27ac != 'not significant'), 
           aes(x=logCPM, y=logFC, color=Diff_H3K27ac)) +
      geom_point(size=0) +
      scale_color_manual(values=c( "blue",'grey',"red")) +
      ggtitle("H3K27ac (MECP2 WT vs KO)") +
      theme_test(15) +
      guides(colour = guide_legend(override.aes = list(size=2)))+
      #geom_vline(xintercept = 2,linetype = 'dashed')+
      annotate("text", x = 6.5, y = -1, 
               label = DiffEnhancer.mod %>% 
                 dplyr::filter(Diff_H3K27ac=='Down') %>% 
                 dim() %>% .[1], color="red",size=4)+
      annotate("text", x = 6.5, y = 1,  
               label = DiffEnhancer.mod %>% 
                 dplyr::filter(Diff_H3K27ac=='Up') %>% 
                 dim() %>% .[1], color="blue",size=4)+
      ylab('logFC (MECP2 WT vs KO)')
    ggsave("Plots/H3K27ac_MECP2_MECP2WT_vs_KO.pdf",units = 'cm',height = 10,width = 14)


    # Filter Enahncer based on logCPM value
    Enhacer.Up_in_MECP2.KO  = DiffEnhancer.mod %>% filter(logCPM >2 & Diff_H3K27ac == 'Up')
    Enhacer.Down_in_MECP2.KO  = DiffEnhancer.mod %>% filter(logCPM >2 & Diff_H3K27ac == 'Down')
    Enhacer.Unchanged_in_MECP2.KO  = DiffEnhancer.mod %>% filter(logCPM >2 & Diff_H3K27ac == 'not significant')

    H3K27ac_CNR.noBlacklist.df.saf %>% 
      filter(GeneID %in% rownames(Enhacer.Up_in_MECP2.KO)) %>% 
      dplyr::select(2,3,4,1) %>% dim()
      write.table(file = "results/H3K27ac/H3K27ac_MECP2_up_MECP2WT.vs.KO.bed",sep='\t',
                  quote = FALSE,row.names = F,col.names = F)

    H3K27ac_CNR.noBlacklist.df.saf %>% 
      filter(GeneID %in% rownames(Enhacer.Down_in_MECP2.KO)) %>% 
      dplyr::select(2,3,4,1) %>%
      write.table(file = "results/H3K27ac/H3K27ac_MECP2_down_MECP2WT.vs.KO.bed",sep='\t',
                  quote = FALSE,row.names = F,col.names = F)

    H3K27ac_CNR.noBlacklist.df.saf %>% 
      filter(GeneID %in% rownames(Enhacer.Unchanged_in_MECP2.KO)) %>% 
      dplyr::select(2,3,4,1) %>%
      write.table(file = "results/H3K27ac/H3K27ac_MECP2_unchanged_MECP2WT.vs.KO.bed",sep='\t',
                  quote = FALSE,row.names = F,col.names = F)


    ```

4.  Figure 3D.

    ```{r,echo=TRUE,eval=FALSE}
    load("results/RData/Boxer_RNAseq_data.RData")

    # read MECP2 peaks with Differential enhancer 
    MECP2_h3k27ac = list.files('results/MECP2_H3K27ac_overlap/',pattern = "*.bed",
                               full.names = TRUE)[c(1,4,5)]
    MECP2_h3k27ac.df = lapply(MECP2_h3k27ac, readPeakFile)
    MECP2_h3k27ac.df.anno = lapply(MECP2_h3k27ac.df, annotatePeak, tssRegion=c(-1000, 1000),
                                   TxDb=txdb, annoDb="org.Mm.eg.db")

    MECP2_h3k27ac.df.anno = lapply(MECP2_h3k27ac.df.anno, as.data.frame)

    names(MECP2_h3k27ac.df.anno) = c('Gain','No Change','Loss')
    MECP2_h3k27ac.df = rbindlist(MECP2_h3k27ac.df.anno,idcol = 'Group')

    #MECP2_h3k27ac.df = merge(MECP2_h3k27ac.df %>% select(1,7,17), DiffEnhancer.mod %>% rownames_to_column(), by.x ='V4',by.y='rowname')

    diff_h3k27c_mecp2_genes = merge(MECP2_h3k27ac.df[,c(1,16)] %>% distinct() %>% filter(!is.na(ENSEMBL)) ,
                                    RNAseq.list[[1]],by='ENSEMBL') %>% 
      
      filter(FDR < 0.05) %>% 
      mutate(Group = factor(Group,levels=c('Loss','No Change','Gain'))) #%>%
      #filter(Group != 'No Change')
      
    ggplot(diff_h3k27c_mecp2_genes,(aes(x=Group,y=logFC))) +
        geom_boxplot()+
      theme_test(15)+
      stat_compare_means(comparisons = list(c('Gain','No Change'),
                                              c('Gain','Loss'),
                                              c('Loss','No Change')))+
      theme(axis.text.x = element_text(angle = 45,vjust=1,hjust=1))+
      xlab('H3K27ac (MECP2 KO vs WT)')+
      ylab('logFC (MECP2 KO vs WT WholeCell RNA-seq)')
    ggsave('Plots/MBHs_enhacer_regulated_genes.pdf',height = 6,width = 4)
    ```

### **Figure 4: MECP2 preferentially represses genes harboring multiple MBH sites.**

1.  Figure 4A.dir.create(file.path(paste0(path,"/results/RData")), showWarnings = FALSE)

    ```{r,echo=TRUE,eval=FALSE,message=FALSE}


    load('results/MECP2/MECP2_regulatedGenes.RData')
    MECP2_regulatedGenes.statistics = data.frame(
      "RNA-seq" = c(rep('wholeCell',6),rep('Nuclear',6),rep('Chromatin',6)),
      "MECP2" = c(rep(c(rep('Bound',3),rep('Unbound',3)),3)),
      "Status" = rep(c("Repressed","Activated","Unchanged"),6),
      "DEGs" = c(
    Mecp2.Bound.meth.expressed.wholeCell   %>% dplyr::filter(DEG == 'Repressed') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.Bound.meth.expressed.wholeCell   %>% dplyr::filter(DEG == 'Activated') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.Bound.meth.expressed.wholeCell   %>% dplyr::filter(DEG == 'Unchanged') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.UnBound.meth.expressed.wholeCell %>% dplyr::filter(DEG == 'Repressed') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.UnBound.meth.expressed.wholeCell %>% dplyr::filter(DEG == 'Activated') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.UnBound.meth.expressed.wholeCell %>% dplyr::filter(DEG == 'Unchanged') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.Bound.meth.expressed.nuclear     %>% dplyr::filter(DEG == 'Repressed') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.Bound.meth.expressed.nuclear     %>% dplyr::filter(DEG == 'Activated') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.Bound.meth.expressed.nuclear     %>% dplyr::filter(DEG == 'Unchanged') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.UnBound.meth.expressed.nuclear   %>% dplyr::filter(DEG == 'Repressed') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.UnBound.meth.expressed.nuclear   %>% dplyr::filter(DEG == 'Activated') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.UnBound.meth.expressed.nuclear   %>% dplyr::filter(DEG == 'Unchanged') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.Bound.meth.expressed.chromatin   %>% dplyr::filter(DEG == 'Repressed') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.Bound.meth.expressed.chromatin   %>% dplyr::filter(DEG == 'Activated') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.Bound.meth.expressed.chromatin   %>% dplyr::filter(DEG == 'Unchanged') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.UnBound.meth.expressed.chromatin %>% dplyr::filter(DEG == 'Repressed') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.UnBound.meth.expressed.chromatin %>% dplyr::filter(DEG == 'Activated') %>% pull(ENSEMBL) %>% unique() %>% length(),
    Mecp2.UnBound.meth.expressed.chromatin %>% dplyr::filter(DEG == 'Unchanged') %>% pull(ENSEMBL) %>% unique() %>% length()))


    MECP2_regulatedGenes.statistics %>% 
      filter(Status !="Unchanged") %>% 
      mutate(MECP2 = factor(MECP2, levels = c('Unbound','Bound'))) %>% 
      #filter(MECP2 != "Unbound") %>%
      #mutate(DEGs = ifelse(Status == 'Repressed',DEGs,DEGs*-1)) %>% 
      ggplot(aes(x=Status,y=DEGs,fill=MECP2))+
      geom_bar(stat='identity')+
      facet_wrap(~RNA.seq)+
      coord_flip() +
      ylim(0,1500)+
      theme_test(20)+
      #geom_hline(yintercept=0)+
      geom_text(aes(label = DEGs), vjust=0.5,hjust = 0.5,size=5)+
      xlab('bulk RNA-seq\n(MECP2 KO vs WT)')+
      ylab('Number of DEGs')
    #ggsave("Plots/MECP2_regulated_DEGs.pdf",height = 2,width = 12)


    load("results/RData/MECP2_peakAnnotation.RData")
    load("results/RData/Boxer_RNAseq_data.RData")

    mecp2.bound.Genes = mecp2.binding %>% pull(SYMBOL) %>% unique()

    RNAseq_Mecp2KO = RNAseq.list[c(1,2,3)]
    geneSet1 = lapply(RNAseq_Mecp2KO, function(x) x %>% dplyr::filter(FDR < 0.05 & logFC > 0) %>% 
                        pull(ENSEMBL))
    geneSet2 = lapply(RNAseq_Mecp2KO, function(x) x %>% dplyr::filter(FDR < 0.05 & logFC < 0) %>% 
                        pull(ENSEMBL))
    geneSet3 = lapply(RNAseq_Mecp2KO, function(x) x %>% dplyr::filter(FDR > 0.05 | is.na(FDR)) %>% 
                        pull(ENSEMBL))
    names(geneSet1) = c("MECP2.KO_vs_Control.WholeCell.Repressed",
                        "MECP2.KO_vs_Control.Nuclear.Repressed",
                        "MECP2.KO_vs_Control.Chromatin.Repressed")
    names(geneSet2) = c("MECP2.KO_vs_Control.WholeCell.Activated",
                        "MECP2.KO_vs_Control.Nuclear.Activated",
                        "MECP2.KO_vs_Control.Chromatin.Activated")
    names(geneSet3) = c("MECP2.KO_vs_Control.WholeCell.Unchanged",
                        "MECP2.KO_vs_Control.Nuclear.Unchanged",
                        "MECP2.KO_vs_Control.Chromatin.Unchanged")

    RNAseq_Mecp2KO_GeneSets = c(geneSet1,geneSet2,geneSet3)

    # Perform Chi-square test for association of bound and unbound genes
    overlap = newGOM(list(MECP2.Target = mecp2.bound.Genes,
                          MECP2.Target2 = mecp2.bound.Genes),
                          RNAseq_Mecp2KO_GeneSets)

    # drawHeatmap(overlap)
    MECP2.Bound.DEG = getNestedList(overlap,name='intersection')
    MECP2.Bound.DEG = (lapply(MECP2.Bound.DEG, unlist, use.names=FALSE))
    MECP2.Bound.DEG = lapply(MECP2.Bound.DEG,unique)
    MECP2.UnBound.DEG = lapply(names(RNAseq_Mecp2KO_GeneSets), function(x) setdiff(RNAseq_Mecp2KO_GeneSets[[x]], MECP2.Bound.DEG[[x]]))
    names(MECP2.UnBound.DEG) = names(RNAseq_Mecp2KO_GeneSets)

    data.frame(lengths(MECP2.Bound.DEG),
    lengths(MECP2.UnBound.DEG)) %>% t()

    #data.frame(lengths(MECP2.Bound.DEG),lengths(MECP2.UnBound.DEG)) |> t() |> 
    #  write.table(., file = "results/MECP2.KO_vs_Control_Bound_Unbound.genes.tsv",sep="\t",quote = FALSE)

    ```

2.  Figure 4B.

    ```{r,echo=TRUE,eval=FALSE}

    # Correlate number of MECP2 binding and SE annotated genes with logFC of gene expression
    MECP2_SE = "results/MECP2_SE/MECP2WT_Gateway_SuperEnhancers.bed" 
    MECP2_SE = readPeakFile(MECP2_SE)
    txdb = TxDb.Mmusculus.UCSC.mm10.knownGene
    MECP2_SE.peakAnno = annotatePeak(MECP2_SE, tssRegion=c(-1000, 1000),TxDb=txdb, annoDb="org.Mm.eg.db")
    MECP2_SE.peakAnno.df = MECP2_SE.peakAnno %>% as.data.frame()

    y.wholeCell = merge(MECP2_SE.peakAnno.df,Mecp2.Bound.meth.expressed.wholeCell,by = 'ENSEMBL') %>% 
      filter(FDR < 0.05) %>% 
      filter(DEG == 'Repressed') %>% 
      dplyr::select(logFC, Binding) %>% 
      mutate(MECP2 = 'SE') %>% 
      dplyr::select(1,3) %>%
      distinct() %>% 
      mutate(RNAseq = 'WholeCell')
    x.wholeCell = mecp2.binding.meth.RNAseqKO_wholeCell %>% filter(DEG != 'Unchanged') %>% 
      group_by(logFC,Binding) %>% 
      summarise(MECP2 =dplyr::n()) %>% 
      mutate(MECP2= ifelse(MECP2==1 & Binding =='Unbound',0, MECP2)) %>% 
      ungroup() %>% 
      dplyr::select(1,3) %>% 
      mutate(MECP2 = ifelse(MECP2 >=10,10,MECP2)) %>% 
      mutate(MECP2 = factor(MECP2,levels = as.character(0:10))) %>%
      mutate(RNAseq = 'WholeCell')

    y.nuclear = merge(MECP2_SE.peakAnno.df,Mecp2.Bound.meth.expressed.nuclear,by = 'ENSEMBL') %>% 
      filter(FDR < 0.05) %>% 
      filter(DEG == 'Repressed') %>% 
      dplyr::select(logFC, Binding) %>% 
      mutate(MECP2 = 'SE') %>% 
      dplyr::select(1,3) %>%
      distinct() %>% 
      mutate(RNAseq = 'Nuclear')
    x.nuclear = mecp2.binding.meth.RNAseqKO_nuclear %>% filter(DEG != 'Unchanged') %>% 
      group_by(logFC,Binding) %>% 
      summarise(MECP2 =dplyr::n()) %>% 
      mutate(MECP2= ifelse(MECP2==1 & Binding =='Unbound',0, MECP2)) %>% 
      ungroup() %>% 
      dplyr::select(1,3) %>% 
      mutate(MECP2 = ifelse(MECP2 >=10,10,MECP2)) %>% 
      mutate(MECP2 = factor(MECP2,levels = as.character(0:10))) %>% 
      mutate(RNAseq = 'Nuclear')

    y.chromatin = merge(MECP2_SE.peakAnno.df,Mecp2.Bound.meth.expressed.chromatin,by = 'ENSEMBL') %>% 
      filter(FDR < 0.05) %>% 
      filter(DEG == 'Repressed') %>% 
      dplyr::select(logFC, Binding) %>% 
      mutate(MECP2 = 'SE') %>% 
      dplyr::select(1,3) %>%
      distinct() %>% 
      mutate(RNAseq = 'Chromatin')
    x.chromatin = mecp2.binding.meth.RNAseqKO_chromatin %>% filter(DEG != 'Unchanged') %>% 
      group_by(logFC,Binding) %>% 
      summarise(MECP2 =dplyr::n()) %>% 
      mutate(MECP2= ifelse(MECP2==1 & Binding =='Unbound',0, MECP2)) %>% 
      ungroup() %>% 
      dplyr::select(1,3) %>% 
      mutate(MECP2 = ifelse(MECP2 >=10,10,MECP2)) %>% 
      mutate(MECP2 = factor(MECP2,levels = as.character(0:10))) %>% 
      mutate(RNAseq = 'Chromatin')

    df = rbind(x.nuclear,y.nuclear,
          x.wholeCell,y.wholeCell,
          x.chromatin,y.chromatin) %>% 
      filter(MECP2 != 'SE') %>% as.data.frame()  %>% 
      filter(logFC >-2) %>% 
      mutate(MECP2 =as.character(MECP2),
             MECP2 = factor(MECP2,levels=as.character(c(0:10))))

    ggplot(df,aes(x=MECP2 ,y =logFC,color=RNAseq))+geom_boxplot()+
      theme_test(20)
    ggsave('Plots/MECP2_regulated_DEGs_boxplot.pdf',width = 8,height = 6)
    ```

3.  Figure 4D.

    ```{r,echo=TRUE,eval=FALSE}

    mouse_human_ortholog = "https://www.informatics.jax.org/downloads/reports/HOM_MouseHumanSequence.rpt"
    mouse_human_genes = read.csv(mouse_human_ortholog,sep="\t")

    # separate human and mouse 
    mouse = split.data.frame(mouse_human_genes,mouse_human_genes$Common.Organism.Name)[[2]]
    human = split.data.frame(mouse_human_genes,mouse_human_genes$Common.Organism.Name)[[1]]

    # remove some columns
    mouse = mouse[,c(1,4)]
    human = human[,c(1,4)]

    # merge the 2 dataset  (note that the human list is longer than the mouse one)
    mh_data = merge.data.frame(mouse,human,by = "DB.Class.Key",all.y = TRUE) 
    save(mh_data,file = 'results/RData/Human_mouse_ortholog.RData')

    colnames(mh_data) = c("DB.Class.Key","Mouse",'Human')


    mecp2ko_logFC=  mecp2.binding.meth.RNAseqKO_wholeCell %>% 
      filter(Meth_CA =='CA' & Meth_CG =='CG') %>% 
      filter(Expression=='Expressed') %>%
      #filter(DEG != 'Unchanged') %>% 
      filter(!is.na(ENSEMBL)) %>% 
      dplyr::select(Gene,logFC,Binding,DEG) %>% 
      group_by(Gene,logFC,Binding) %>% 
      summarise(Count= dplyr::n()) %>%
      filter(!is.na(logFC)) %>% 
      mutate(Count= ifelse(Count==1 & Binding =='Unbound',0, Count)) %>% 
      merge(.,mh_data,by.x='Gene',by.y="Mouse") %>% 
      ungroup() %>%
      #dplyr::select() %>% 
      filter(!duplicated(.[,]))


    MECP2_SE = "results/MECP2_SE/MECP2WT_Gateway_SuperEnhancers.bed" 
    MECP2_SE = readPeakFile(MECP2_SE)
    txdb = TxDb.Mmusculus.UCSC.mm10.knownGene
    MECP2_SE.peakAnno = peakAnno.mecp2 = annotatePeak(MECP2_SE, 
                                                      tssRegion=c(-1000, 1000),TxDb=txdb, 
                                                      annoDb="org.Mm.eg.db")
    MECP2_SE.peakAnno.df = MECP2_SE.peakAnno %>% as.data.frame()

    # Download Supplementary file 7 (https://doi.org/10.1038/s41593-018-0270-6)
    link = "https://static-content.springer.com/esm/art%3A10.1038%2Fs41593-018-0270-6/MediaObjects/41593_2018_270_MOESM10_ESM.csv"

    RTT_cortex = read.csv(link,sep = "")
    head(RTT_cortex)
    mecp2_rperessed = mecp2ko_logFC %>%
      merge(.,RTT_cortex,by.x='Human',by.y='gene_name') #%>% 
    #filter( qval < 0.05) %>% 


    mecp2_rperessed.all = mecp2_rperessed %>% mutate(Group ='All') 

    mecp2_rperessed.noMBH = mecp2_rperessed %>% #filter(!(Gene %in% mecp2.binding$SYMBOL)) %>% 
      #filter(Count >=7) %>% 
      mutate(Group = 'No MBHs') %>% filter( qval < 0.05) #logFC >0)
    mecp2_rperessed.7MBH = mecp2_rperessed %>% filter(Gene %in% MECP2_SE.peakAnno.df$SYMBOL) %>% 
      #filter(Count >=7) %>% 
      mutate(Group = 'MBH Cluster') %>% filter(logFC > 0 & qval < 0.05) #logFC >0)# &

    Rtt.plt = rbind(mecp2_rperessed.all,mecp2_rperessed.7MBH) %>% 
      dplyr::select(1,12,9)  %>% 
      mutate(Group=factor(Group,levels= c('All','MBH Cluster'))) %>%
      ggplot(aes(x=Group,y=Log2FC,color=Group))+
      geom_boxplot(outlier.colour = 'NA')+
      ylim(-1.2,3)+
      stat_compare_means()+
      scale_x_discrete(labels=c(paste('All Genes'),
                                paste('Genes regulated by\nBroad MBH clusters')))+
      scale_color_manual(values = c('grey','red'))+
      theme_test(20)+
      ylab("log2 Fold Change\n(RTT/WT)")+
      ggtitle('Cortex (Renthal et. al, Nature Neuroscience 2018)')+
      theme(legend.position = "none")


    Rtt.plt
    ggsave("Plots/RTT_SingleNuclei_geneExpression.pdf",height = 6,width = 5)
    ```

4.  **Supplementary Figure 4A**

    ```{r,echo=TRUE,eval=FALSE,message=FALSE}

    load("results/RData/MECP2_regulatedGenes.RData")
    Pie.chart.list = list()
    # all MECP2 annotated and unannotated genes
    MECP2.pie.all = mecp2.binding.meth.RNAseqKO_nuclear %>% 
      filter(FDR < 0.05) %>% 
      filter(!is.na(ENSEMBL)) %>% 
      filter(Meth_CA=='CA') %>%
      #filter(FDR < 0.05) %>% 
      dplyr::select(ENSEMBL,Binding) %>% 
      group_by(ENSEMBL,Binding) %>% 
      summarize(Count=dplyr::n()) %>% 
      mutate(Count = ifelse(Binding == 'Unbound',0,Count)) %>% 
      group_by(Count) %>% 
      summarize(Count_1=dplyr::n()) %>% 
      mutate(Count_2 = ifelse(Count >=10, sum(Count_1[Count >=10]),Count_1)) %>% 
      mutate(Peaks = (ifelse(Count >= 10, '>=10', Count))) %>% 
      dplyr::select(3,4) %>% 
      distinct() %>%
      mutate(Peaks = factor(Peaks, levels = c(as.character(0:9),'>=10'))) %>% 
      mutate(Percent = round(Count_2/sum(Count_2)*100,2))


    nb.cols = 10
    mycolors = colorRampPalette(brewer.pal(8, "Set2"))(nb.cols)
    mycolors = c('#71CAF7',mycolors)
    threshold = 0.05
    Pie.chart.list[[1]] = MECP2.pie.all %>% 
      ggplot(aes(x = "", y = Percent, fill = Peaks)) +
      geom_bar(width = 1, stat = "identity", color = "white") +
      coord_polar("y", start = 0)+
      geom_text(aes(x = 1.55, label = scales::percent(Percent, accuracy = 0.1,scale = 1)), position = position_stack(vjust = .5),size=3) +
      coord_polar("y") +
      theme_void()+
      theme(legend.title = element_text(size=10),
            legend.text = element_text(size=10))+
      scale_fill_manual(name = 'All Genes with\n number of MECP2 peaks',values = mycolors)


    # Repressed  MECP2 annotated and unannotated genes
    MECP2.pie.repressed = mecp2.binding.meth.RNAseqKO_nuclear %>% 
      filter(DEG=='Repressed') %>%
      filter(!is.na(ENSEMBL)) %>% 
      filter(Meth_CA=='CA') %>%
      
      dplyr::select(ENSEMBL,Binding) %>% 
      group_by(ENSEMBL,Binding) %>% 
      summarize(Count=dplyr::n()) %>% 
      mutate(Count = ifelse(Binding == 'Unbound',0,Count)) %>% 
      group_by(Count) %>% 
      summarize(Count_1=dplyr::n()) %>% 
      mutate(Count_2 = ifelse(Count >=10, sum(Count_1[Count >=10]),Count_1)) %>% 
      mutate(Peaks = (ifelse(Count >= 10, '>=10', Count))) %>% 
      dplyr::select(3,4) %>% 
      distinct() %>%
      mutate(Peaks = factor(Peaks, levels = c(as.character(0:9),'>=10'))) %>% 
      mutate(Percent = round(Count_2/sum(Count_2)*100,2))

    nb.cols = 10
    mycolors = colorRampPalette(brewer.pal(8, "Set2"))(nb.cols)
    mycolors = c('#71CAF7',mycolors)
    threshold = 0.05
    Pie.chart.list[[3]] = MECP2.pie.repressed %>% 
      #mutate(Peaks =as.character(Peaks)) %>% 
      ggplot(aes(x = "", y = Percent, fill = Peaks)) +
      geom_bar(width = 1, stat = "identity", color = "white") +
      coord_polar("y", start = 0)+
      geom_text(aes(x = 1.55, label = scales::percent(Percent, accuracy = 0.1,scale = 1)), position = position_stack(vjust = .5),size=3) +
      coord_polar("y") +
      theme_void()+
      theme(legend.title = element_text(size=10),
            #legend.key.size = unit(2, 'cm'),
            legend.text = element_text(size=10))+
      scale_fill_manual(name = 'Repressed Genes with\n number of MECP2 peaks',values = mycolors)


    # Activated  MECP2 annotated and unannotated genes
    MECP2.pie.activated= mecp2.binding.meth.RNAseqKO_nuclear %>% 
      filter(DEG=='Activated') %>%
      filter(!is.na(ENSEMBL)) %>% 
      filter(Meth_CA=='CA') %>%
      
      dplyr::select(ENSEMBL,Binding) %>% 
      group_by(ENSEMBL,Binding) %>% 
      summarize(Count=dplyr::n()) %>% 
      mutate(Count = ifelse(Binding == 'Unbound',0,Count)) %>% 
      group_by(Count) %>% 
      summarize(Count_1=dplyr::n()) %>% 
      mutate(Count_2 = ifelse(Count >=10, sum(Count_1[Count >=10]),Count_1)) %>% 
      mutate(Peaks = (ifelse(Count >= 10, '>=10', Count))) %>% 
      dplyr::select(3,4) %>% 
      distinct() %>%
      mutate(Peaks = factor(Peaks, levels = c(as.character(0:9),'>=10'))) %>% 
      #mutate(Peaks = factor(Peaks, levels = c('<5','>=5'))) %>% 
      mutate(Percent = round(Count_2/sum(Count_2)*100,2))

    nb.cols = 10
    mycolors = colorRampPalette(brewer.pal(8, "Set2"))(nb.cols)
    mycolors = c('#71CAF7',mycolors)
    threshold = 0.05
    Pie.chart.list[[2]] = MECP2.pie.activated %>% 
      #mutate(Peaks =as.character(Peaks)) %>% 
      ggplot(aes(x = "", y = Percent, fill = Peaks)) +
      geom_bar(width = 1, stat = "identity", color = "white") +
      coord_polar("y", start = 0)+
      geom_text(aes(x = 1.55, label = scales::percent(Percent, accuracy = 0.1,scale = 1)), position = position_stack(vjust = .5),size=3) +
      coord_polar("y") +
      theme_void()+
      theme(legend.title = element_text(size=10),
            legend.text = element_text(size=10))+
      scale_fill_manual(name = 'Activated Genes with\n number of MECP2 peaks',values = mycolors)
    Pie.chart.list[[2]]
    position = position_stack(vjust = .5)

    pdf('Plots/MECP2_regulated_DEGs_peak_distribution.pdf',width = 15,height = 10)
    do.call(grid.arrange,c(Pie.chart.list, ncol=3))
    dev.off()
    ```

5.  **Supplementary Figure 4B**

    ```{r,echo=TRUE,eval=FALSE}

    load('results/MECP2/MECP2_regulatedGenes.RData')

    # Correlation of number of MECP2 peaks with Average logFC
    # WholeCell
    Mecp2.Bound.meth.expressed.wholeCell %>% 
      dplyr::filter(DEG!='Unchanged') %>% 
      dplyr::select("DEG","ENSEMBL","logFC","geneLength") %>% 
      dplyr::group_by(DEG,ENSEMBL,logFC)  %>% 
      dplyr::summarize(count=dplyr::n()) %>% 
      mutate(count=as.character(count)) %>% 
      dplyr::group_by(DEG,count) %>% 
      dplyr::summarise(AvglogFC = mean(logFC)) %>%
      mutate(count=as.integer(count)) %>%
      ggplot(aes(x=count,y=AvglogFC))+
      geom_point()+
      stat_cor()+
      geom_smooth(method = 'lm')+
      facet_wrap(~DEG,scales = "free")+
      theme_test(20)+
      xlab('Number of MECP2 peaks associated with DEGs')
    ggsave("Plots/MECP2_peaks_correlation_with_logFC.WholeCell.pdf",height = 5,width = 10)

    #Nuclear
    Mecp2.Bound.meth.expressed.nuclear %>% 
      dplyr::filter(DEG!='Unchanged') %>% 
      dplyr::select("DEG","ENSEMBL","logFC","geneLength") %>% 
      dplyr::group_by(DEG,ENSEMBL,logFC)  %>% 
      dplyr::summarize(count=dplyr::n()) %>% 
      mutate(count=as.character(count)) %>% 
      dplyr::group_by(DEG,count) %>% 
      dplyr::summarise(AvglogFC = mean(logFC)) %>%
      mutate(count=as.integer(count)) %>%
      ggplot(aes(x=count,y=AvglogFC))+
      geom_point()+
      stat_cor()+
      geom_smooth(method = 'lm')+
      facet_wrap(~DEG,scales = "free")+
      theme_test(20)+
      xlab('Number of MECP2 peaks associated with DEGs')
    ggsave("Plots/MECP2_peaks_correlation_with_logFC.Nuclear.pdf",height = 5,width = 10)

    #Chromatin
    Mecp2.Bound.meth.expressed.chromatin %>% 
      dplyr::filter(DEG!='Unchanged') %>% 
      dplyr::select("DEG","ENSEMBL","logFC","geneLength") %>% 
      dplyr::group_by(DEG,ENSEMBL,logFC)  %>% 
      dplyr::summarize(count=dplyr::n()) %>% 
      mutate(count=as.character(count)) %>% 
      dplyr::group_by(DEG,count) %>% 
      dplyr::summarise(AvglogFC = mean(logFC)) %>%
      mutate(count=as.integer(count)) %>%
      ggplot(aes(x=count,y=AvglogFC))+
      geom_point()+
      stat_cor()+
      geom_smooth(method = 'lm')+
      facet_wrap(~DEG,scales = "free")+
      theme_test(20)+
      xlab('Number of MECP2 peaks associated with DEGs')
    ggsave("Plots/MECP2_peaks_correlation_with_logFC.Chromatin.pdf",height = 5,width = 10)
    ```

6.  **Supplementary Figure 4D**

    ```{r,echo=TRUE,eval=FALSE}

    # read SuperEnhacer Table 
    SE_size.GR =read.csv('results/MECP2_SE/MECP2WT_AllEnhancers.table.txt',sep='\t',
                         header = T,skip = 5) %>% 
      dplyr::select(2,3,4,1,10) %>% GRanges()
    txdb = TxDb.Mmusculus.UCSC.mm10.knownGene
    MECP2_SE.all.peakAnno  = annotatePeak(SE_size.GR, tssRegion=c(-1000, 1000),TxDb=txdb, annoDb="org.Mm.eg.db")
    MECP2_SE.all.peakAnno.df = MECP2_SE.all.peakAnno %>% as.data.frame()

    MECP2_SE_genes.wholeCell = merge(MECP2_SE.all.peakAnno.df,mecp2.binding.meth.RNAseqKO_wholeCell %>% filter(FDR < 0.05) %>% select(1,21,22) %>% distinct(),
                                     by = 'ENSEMBL',all=TRUE)
      #filter(DEG == 'Repressed') 

    MECP2_SE_genes.wholeCell %>% 
      filter(!is.na(logFC)) %>% dplyr::select('logFC','isSuper') %>% 
      filter(logFC > -2) %>% 
      mutate(isSuper = ifelse(is.na(isSuper),2,isSuper)) %>% 
      filter(isSuper !=0) %>% distinct() %>% 
      mutate(isSuper = ifelse(isSuper==2,0,isSuper)) %>% 
      ggplot(aes(x=as.character(isSuper),y=logFC,color=as.character(isSuper)))+geom_boxplot()+
      stat_compare_means(method = 'wilcox',label.y = 1.2)+
      theme_test(20)+
      scale_color_manual(values = c('grey','red'))+
      scale_x_discrete(labels=c(paste('All Genes'),
                                paste('Genes with\nBroad MBH clusters')))+
      theme_test(20)+
      ylab("log2 Fold Change\n(Mecp2 KO/WT)")+
      theme(legend.position = 'none',axis.title.x = element_blank())
    ggsave('Plots/MECP2_SE_genes_logFC.pdf',height = 7,width = 6)

    ```

### **Figure 5: MBHs repress genes independently of the mCA pathway.**

1.  **Figure 5A**

    ```{r,echo=TRUE,eval=FALSE}

    load("results/RData/Boxer_RNAseq_data.RData")
    load('results/RData/MECP2_regulatedGenes.RData',verbose = TRUE)
    load('results/RData/MECP2_peakAnnotation.RData',verbose = TRUE)

    MECP2KO_up_unique = setdiff(RNAseq.list[[1]] %>% filter(FDR < 0.05 & logFC >0) %>% pull(Gene),
                                RNAseq.list[[7]] %>% filter(FDR < 0.05 & logFC >0) %>% pull(Gene_name)) 

    DNMT3AKO_up_unique = setdiff(RNAseq.list[[7]] %>% filter(FDR < 0.05 & logFC >0) %>% pull(Gene_name),
                                 RNAseq.list[[1]] %>% filter(FDR < 0.05 & logFC >0) %>% pull(Gene))

    MECP2KO_up_unique_peaks = mecp2.binding.meth.RNAseqKO_wholeCell %>% 
      filter(Gene %in% MECP2KO_up_unique) %>% 
      #filter(!is.na(ENSEMBL)) %>% 
      mutate(Binding = ifelse(!is.na(SYMBOL),'Bound','Unbound')) %>% 
      dplyr::select(Gene,Binding) %>% 
      group_by(Gene,Binding) %>% 
      summarise(MECP2 = dplyr::n()) %>% 
      mutate(MECP2 = ifelse(Binding == 'Unbound',0,MECP2)) 

    DNMT3A_up_unique_peaks = merge(RNAseq.list[[7]],mecp2.binding,by='ENSEMBL',all.x=TRUE) %>% 
      filter(Gene_name %in% DNMT3AKO_up_unique) %>% 
      #filter(!is.na(ENSEMBL)) %>%
      mutate(Binding = ifelse(!is.na(Gene_name),'Bound','Unbound')) %>%
      dplyr::select(Gene_name,Binding) %>% group_by(Gene_name,Binding) %>% 
      summarise(MECP2 = dplyr::n()) %>%
      mutate(MECP2 = ifelse(Binding == 'Unbound',0,MECP2)) 

    rbind(DNMT3A_up_unique_peaks[,2:3] %>% mutate(Group='DNMT3A'),
            MECP2KO_up_unique_peaks[,2:3] %>% mutate(Group='MECP2')) %>%  
      filter(MECP2 >0) %>% 
      ggplot(aes(x=Group,y=MECP2))+
      geom_boxplot()+
      #ylim(0,20)+
      coord_cartesian(ylim = c(0, 55))+
      stat_compare_means(label.y = 45) +
      theme_test(20)+
      ylab("Number of MBHs")

    ggsave('Plots/MECP2_peak_distribution_MECP2KO_DNMTKO_genes.pdf',height = 4,width = 4) 
    ```

2.  Figure 5B, Supplementary Figure 5A-B.

    ```{r,echo=TRUE,eval=FALSE}


    source("scripts/R/logFC_mCA_correlation.R")
    load('results/MECP2/MECP2_regulatedGenes.RData',verbose=TRUE)

    # WholeCell
    pltt.linePlot = logFC_mCA_corr(mecp2.binding.meth.RNAseqKO_wholeCell,"linePlot")
    pltt.boxplot = logFC_mCA_corr(mecp2.binding.meth.RNAseqKO_wholeCell,"boxplot")

    for (i in 1:length(pltt.linePlot)) {
      pdf(paste0('Plots/logFC_mCA_correlation_WholeCellRNAseq_',i,'.pdf'),height = 5,width = 10)
      print(pltt.linePlot[[i]])
      dev.off()
      
    }
    for (i in 1:length(pltt.linePlot)) {
      pdf(paste0('Plots/logFC_mCA_correlation_WholeCellRNAseq_boxplot_',i,'.pdf'),height =8,width = 6)
      print(pltt.boxplot[[i]])
      dev.off()
      
    }

    # Nuclear
    pltt.linePlot = logFC_mCA_corr(mecp2.binding.meth.RNAseqKO_nuclear,"linePlot")
    pltt.boxplot = logFC_mCA_corr(mecp2.binding.meth.RNAseqKO_nuclear,"boxplot")

    for (i in 1:length(pltt.linePlot)) {
      pdf(paste0('Plots/logFC_mCA_correlation_Nuclear_',i,'.pdf'),height = 5,width = 10)
      print(pltt.linePlot[[i]])
      dev.off()
      
    }
    for (i in 1:length(pltt.linePlot)) {
      pdf(paste0('Plots/logFC_mCA_correlation_Nuclear_boxplot_',i,'.pdf'),height =8,width = 6)
      print(pltt.boxplot[[i]])
      dev.off()
      
    }

    # Chromatin
    pltt.linePlot = logFC_mCA_corr(mecp2.binding.meth.RNAseqKO_chromatin,"linePlot")
    pltt.boxplot = logFC_mCA_corr(mecp2.binding.meth.RNAseqKO_chromatin,"boxplot")

    for (i in 1:length(pltt.linePlot)) {
      pdf(paste0('Plots/logFC_mCA_correlation_Chromatin_',i,'.pdf'),height = 5,width = 10)
      print(pltt.linePlot[[i]])
      dev.off()
      
    }
    for (i in 1:length(pltt.linePlot)) {
      pdf(paste0('Plots/logFC_mCA_correlation_Chromatin_boxplot_',i,'.pdf'),height =8,width = 6)
      print(pltt.boxplot[[i]])
      dev.off()
      
    }


    MECP2_regulated_genes_with_mCA = list()
      
    MECP2_regulated_genes_with_mCA[[1]] = mecp2.binding.meth.RNAseqKO_wholeCell %>% 
      filter(DEG != 'Unchanged', Meth_CA == 'CA') %>% 
      mutate(mCA = ifelse(CA_meth > median(CA_meth),'High_mCA', 'Low_mCA')) %>% 
      dplyr::select(22,26,31) %>% 
      group_by(logFC) %>% 
      mutate(MECP2 = dplyr::n()) %>% 
      ungroup() %>% 
      distinct() %>% 
      mutate(MECP2 = ifelse(Binding == 'Unbound' & MECP2 ==1, 0, MECP2),
             Group1 = 'All',
             Group2 = ifelse(MECP2 >=7, '>=7 MBHs','NA'))  %>% 
      dplyr::select(5,6,3,1) %>% 
      pivot_longer(cols=c('Group1','Group2')) %>%
      filter(value != 'NA') %>% 
      mutate(value = factor(value,levels= c('All','>=7 MBHs')),
             mCA= factor(mCA, levels= c('Low_mCA','High_mCA'))) %>% 
      ggplot(aes(x=value,y=logFC,color=value))+
      geom_boxplot()+facet_wrap(~mCA)+
      stat_compare_means()+
      scale_color_manual(values = c('grey','red'))+
      theme_test(20)



    MECP2_regulated_genes_with_mCA[[2]] = mecp2.binding.meth.RNAseqKO_nuclear %>% 
      filter(DEG != 'Unchanged', Meth_CA == 'CA') %>% 
      mutate(mCA = ifelse(CA_meth > median(CA_meth),'High_mCA', 'Low_mCA')) %>% 
      dplyr::select(22,26,31) %>% 
      group_by(logFC) %>% 
      mutate(MECP2 = dplyr::n()) %>% 
      ungroup() %>% 
      distinct() %>% 
      mutate(MECP2 = ifelse(Binding == 'Unbound' & MECP2 ==1, 0, MECP2),
             Group1 = 'All',
             Group2 = ifelse(MECP2 >=7, '>=7 MBHs','NA'))  %>% 
      dplyr::select(5,6,3,1) %>% 
      pivot_longer(cols=c('Group1','Group2')) %>%
      filter(value != 'NA') %>% 
      mutate(value = factor(value,levels= c('All','>=7 MBHs')),
             mCA= factor(mCA, levels= c('Low_mCA','High_mCA'))) %>% 
      ggplot(aes(x=value,y=logFC,color=value))+
      geom_boxplot()+facet_wrap(~mCA)+
      stat_compare_means()+
      scale_color_manual(values = c('grey','red'))+
      theme_test(20)


    MECP2_regulated_genes_with_mCA[[3]] = mecp2.binding.meth.RNAseqKO_chromatin %>% 
      filter(DEG != 'Unchanged', Meth_CA == 'CA') %>% 
      mutate(mCA = ifelse(CA_meth > median(CA_meth),'High_mCA', 'Low_mCA')) %>% 
      dplyr::select(22,26,31) %>% 
      group_by(logFC) %>% 
      mutate(MECP2 = dplyr::n()) %>% 
      ungroup() %>% 
      distinct() %>% 
      mutate(MECP2 = ifelse(Binding == 'Unbound' & MECP2 ==1, 0, MECP2),
             Group1 = 'All',
             Group2 = ifelse(MECP2 >=7, '>=7 MBHs','NA'))  %>% 
      dplyr::select(5,6,3,1) %>% 
      pivot_longer(cols=c('Group1','Group2')) %>%
      filter(value != 'NA') %>% 
      mutate(value = factor(value,levels= c('All','>=7 MBHs')),
             mCA= factor(mCA, levels= c('Low_mCA','High_mCA'))) %>% 
      ggplot(aes(x=value,y=logFC,color=value))+
      geom_boxplot()+facet_wrap(~mCA)+
      stat_compare_means()+
      scale_color_manual(values = c('grey','red'))+
      theme_test(20)

    pdf('Plots/MECP2_regulated_DEGs_with_mCA_boxplot.pdf',height = 4,width = 15) 
    do.call(grid.arrange,c(MECP2_regulated_genes_with_mCA,ncol=3))
    dev.off() 
    ```

3.  Figure 5C, Supplementary Figure 5C-D.

    ```{r,echo=TRUE,eval=FALSE}

    load('results/MECP2/MECP2_regulatedGenes.RData',verbose=TRUE)
    load('results/RData/ENSEMBL.IDs_with_start_end.RData',verbose = TRUE)
    df = merge(mecp2.binding.meth.RNAseqKO_nuclear,ensenbl_location,
               by.x='ENSEMBL',by.y='ensembl_gene_id',all.x=TRUE) %>% filter(!is.na(ENSEMBL))


    logFC_geneLength.nuclear.bound = df %>% 
      filter(Binding == 'Bound') %>%
      filter(DEG!='Unchanged') %>% 
      filter(Meth_CA=='CA') %>%
      mutate(geneLength = end_position-start_position) %>% 
      dplyr::select(logFC,geneLength) %>% 
      arrange(desc(geneLength)) %>%
      distinct() 

    logFC_geneLength.nuclear.all = df %>% 
      filter(DEG!='Unchanged') %>% 
      filter(Meth_CA=='CA') %>%
      mutate(geneLength = end_position-start_position) %>% 
      dplyr::select(logFC,geneLength) %>% 
      arrange(desc(geneLength)) %>%
      distinct() 


    df.bin =list()
    summarize_logFC_mCA = function(x,binSize = 19,stepSize =4){
      for (i in seq(from=1, to=nrow(x), by=stepSize)){
        print(i)
        start = i
        stop  = i+binSize
        if(stop <= nrow(x)){
          df = x[start:stop,]
          df.bin[[i]] = df  %>% summarize(logFC.mean=mean(logFC),logFC.sd = sd(logFC),CA_meth.mean=mean(geneLength))
        }
        else{
          return(df.bin)
        }
      }
    }
    x = summarize_logFC_mCA(logFC_geneLength.nuclear.bound, binSize = 39,stepSize =4)
    y = summarize_logFC_mCA(logFC_geneLength.nuclear.all, binSize = 79,stepSize =4)
    MECP2_bound = do.call(rbind,x) %>% mutate(MECP2 ='MECP2 Bound')
    MECP2_all   = do.call(rbind,y) %>% mutate(MECP2 ='All')

    plt = list()
    plt.boxplot = list()
    plt[[1]] = rbind(MECP2_bound,MECP2_all)  %>% 
      ggplot(aes(x=CA_meth.mean,y=logFC.mean,color=MECP2))+
      geom_point(size=0.5)+
      geom_line()+
      geom_ribbon(aes(x=CA_meth.mean,y=logFC.mean,
                      ymin=logFC.mean-logFC.sd,
                      ymax=logFC.mean+logFC.sd,fill=MECP2),
                  alpha=0.1,color='NA') +
      scale_fill_manual(name = "DEGs (MECP2 KO vs WT)",values = c('black','red'),aesthetics = c("colour", "fill"))+
      scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
                    labels = trans_format("log10", math_format(10^.x))) +
      stat_cor()+
      theme_test(20)+
      xlab('Gene Length(bp)')+
      ylab('Mean log2 Fold Change')+
      guides(color = guide_legend(override.aes = aes(label = "")))


    plt[[1]]

    logFC_geneLength_corr = function(df,plotType){
      df = merge(df,ensenbl_location,by.x='ENSEMBL',by.y='ensembl_gene_id',all.x=TRUE) %>% filter(!is.na(ENSEMBL))
    logFC_geneLength.nuclear.bound_with_count = df %>% 
      filter(Binding == 'Bound') %>%
      filter(DEG!='Unchanged') %>% 
      filter(Meth_CA=='CA') %>%
      mutate(geneLength = end_position-start_position) %>% 
      dplyr::select(logFC,geneLength) %>% 
      group_by(logFC,geneLength) %>% 
      summarize(Count=dplyr::n()) %>% 
      mutate(MECP2 = case_when(Count <7~'1-6 MBHs',
                               Count >=7~'>=7 MBHs')) 

    logFC_geneLength.nuclear.bound_with_count.list = split(logFC_geneLength.nuclear.bound_with_count, f =logFC_geneLength.nuclear.bound_with_count$MECP2)

    logFC_geneLength.nuclear.bound_with_count.list = lapply(logFC_geneLength.nuclear.bound_with_count.list, function(x) x %>% arrange(desc(geneLength)))

    tmp = lapply(logFC_geneLength.nuclear.bound_with_count.list, function(x) summarize_logFC_mCA(x %>% as.data.frame(),binSize = 19,stepSize = 2))
    tmp1 = lapply(tmp, function(x) do.call(rbind,x))
    tmp2 = plyr::ldply(tmp1,data.frame)
    colnames(tmp2)[1] = 'MECP2'
    logFC_mCA.nuclear.bound_with_count.avg = tmp2[,c(2,3,4,1)]


    plt = rbind(logFC_mCA.nuclear.bound_with_count.avg,MECP2_all)  %>% 
      filter(MECP != '1-6 MBHs') %>% 
      ggplot(aes(x=CA_meth.mean,y=logFC.mean,color=MECP2))+
      geom_point(size=0.5)+
      geom_line()+
      geom_ribbon(aes(x=CA_meth.mean,y=logFC.mean,
                      ymin=logFC.mean-logFC.sd,
                      ymax=logFC.mean+logFC.sd,fill=MECP2),
                  alpha=0.1,color='NA') +
      scale_fill_manual(name = "DEGs (MECP2 KO vs WT)",values = c('red','black'),aesthetics = c("colour", "fill"))+
      scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
                    labels = trans_format("log10", math_format(10^.x))) +
      stat_cor()+
      theme_test(20)+
      xlab('Gene Length(bp)')+
      ylab('Mean log2 Fold Change')+
      #ylim(-0.9,0.9)+
      #scale_y_continuous(limits = c(-0.6, 0.7), breaks = seq(-0.6, 0.7, by = 0.3))+
      guides(color = guide_legend(override.aes = aes(label = "")))
    plt[[3]]


    plt.boxplot = rbind(logFC_mCA.nuclear.bound_with_count.avg,MECP2_all)  %>% 
      mutate(MECP2 = factor(MECP2, levels=c('All','1-6 MBHs','>=7 MBHs'))) %>% 
      ggplot(aes(x=MECP2,y=logFC.mean,color=MECP2))+
      geom_boxplot()+stat_compare_means(comparisons = list(c('All','>=7 MBHs')))
                                                           #c('All','1-6 MBHs'),
                                                           #c('1-6 MBHs','>=7 MBHs'))) + 
      scale_color_manual(values = c('black','red'))+
      theme_test(20) + 
      theme(axis.text.x = element_text(angle=45,hjust = 1,vjust = 1))+
      xlab('DEGs (MECP2 KO vs WT)')

      if(plotType == 'linePlot'){
        return(plt)
      }
      if(plotType == 'boxplot'){
        return(plt.boxplot)
      }
    }

    # Nuclear
    plt.linePlot = logFC_geneLength_corr(mecp2.binding.meth.RNAseqKO_nuclear,"linePlot")
    plt.boxplot = logFC_geneLength_corr(mecp2.binding.meth.RNAseqKO_nuclear,"boxplot")

    pdf('Plots/logFC_geneLength_correlation_Nuclear.pdf',height = 5,width = 10)
    print(plt.linePlot)
    dev.off()
      

    pdf('Plots/logFC_geneLength_correlation_Nuclear_boxplot.pdf',height = 8,width = 6)
    print(plt.boxplot)
    dev.off()

    # WholeCell
    plt.linePlot = logFC_geneLength_corr(mecp2.binding.meth.RNAseqKO_wholeCell,"linePlot")
    plt.boxplot = logFC_geneLength_corr(mecp2.binding.meth.RNAseqKO_wholeCell,"boxplot")

    pdf('Plots/logFC_geneLength_correlation_WholeCell.pdf',height = 5,width = 10)
    print(plt.linePlot)
    dev.off()


    pdf('Plots/logFC_geneLength_correlation_WholeCell_boxplot.pdf',height = 8,width = 6)
    print(plt.boxplot)
    dev.off()

    # Chromatin
    plt.linePlot = logFC_geneLength_corr(mecp2.binding.meth.RNAseqKO_chromatin,"linePlot")
    plt.boxplot = logFC_geneLength_corr(mecp2.binding.meth.RNAseqKO_chromatin,"boxplot")

    pdf('Plots/logFC_geneLength_correlation_Chromatin.pdf',height = 5,width = 10)
    print(plt.linePlot)
    dev.off()


    pdf('Plots/logFC_geneLength_correlation_Chromatin_boxplot.pdf',height = 8,width = 6)
    print(plt.boxplot)
    dev.off()


    ```

4.  Figure 5D and Supplementary Figure 7

    ```{r,echo=TRUE,eval=FALSE}

    load("results/RData/MECP2_regulatedGenes.RData",verbose =TRUE)

    # All repressed genes (MECP2 KO vs WT)
    MECP2_repressed_gene.wholeCell = mecp2.binding.meth.RNAseqKO_wholeCell %>% 
      filter(FDR < 0.05) %>% 
      filter(Meth_CA == 'CA' & Meth_CG =='CG') %>%
      filter(DEG=='Repressed') %>% 
      pull(ENSEMBL) %>% 
      unique()

    # Convert Gene Symbol to ENSEMBL id 
    MECP2_repressed_gene.wholeCell.geneId = mapIds(org.Mm.eg.db,
                                                   keys=MECP2_activated_gene.wholeCell,
                                                   column="ENTREZID",
                                                   keytype="ENSEMBL",multiVals="first") 

    formula_res = enrichGO(MECP2_repressed_gene.wholeCell.geneId,
                            OrgDb='org.Mm.eg.db',
                            ont="BP",
                            #universe =unique(mecp2.binding.meth.RNAseqKO_wholeCell$geneId),
                            readable=TRUE )

    formula_res %>% 
      write.table("results/MECP2_RNAseq/All_MECP2_repressed_genes_GOBP_terms.tsv",
                  sep = "\t", row.names = FALSE,quote = T)

    formula_res@result %>% filter(p.adjust < 0.05) %>% #View() 
      arrange(p.adjust) %>% 
      slice(1:18) %>%
      ggplot(aes(x=-log10(pvalue),y=reorder(Description,-pvalue)))+
      geom_bar(stat='identity')+theme_test(20)+
      ggtitle('Enriched GO terms for All repressed genes')
    ggsave('Plots/All_MECP2_repressed_genes_GO_terms.pdf',height = 6,width = 12.2)


    # MBHs repressed genes
    MECP2_regulated_gene.wholeCell = Mecp2.Bound.meth.expressed.wholeCell %>% 
      filter(FDR < 0.05) %>% 
      filter(DEG=='Repressed') %>% 
      pull(geneId) %>% 
      unique()

    formula_res = enrichGO(MECP2_regulated_gene.wholeCell,
                            OrgDb='org.Mm.eg.db',
                            ont="BP",
                            #universe =unique(mecp2.binding.meth.RNAseqKO_wholeCell$geneId),
                            readable=TRUE )

    formula_res %>% 
      write.table("results/MECP2_RNAseq/MBHs_repressed_genes_GOBP_terms.tsv",
                  sep = "\t", row.names = FALSE,quote = T)

    formula_res@result %>% filter(p.adjust < 0.05) %>% #View() 
      arrange(p.adjust) %>%  View()
      slice(1:18) %>%
      ggplot(aes(x=-log10(pvalue),y=reorder(Description,-pvalue)))+
      geom_bar(stat='identity')+theme_test(20)+
      ggtitle('Enriched GO terms for >=7 MBHs repressed genes')

    ggsave('Plots/MBHs_repressed_genes_GO_terms.pdf',height = 6,width = 12)


    # All activated genes (MECP2 KO vs WT)
    MECP2_activated_gene.wholeCell = mecp2.binding.meth.RNAseqKO_wholeCell %>% 
      filter(FDR < 0.05) %>% 
      filter(Meth_CA == 'CA' & Meth_CG =='CG') %>%
      filter(DEG=='Activated') %>% 
      pull(ENSEMBL) %>% 
      unique()

    # Convert Gene Symbol to ENSEMBL id 
    MECP2_activated_gene.wholeCell.geneId = mapIds(org.Mm.eg.db,
                                                   keys=MECP2_activated_gene.wholeCell,
                                                   column="ENTREZID",
                                                   keytype="ENSEMBL",multiVals="first") 

    formula_res = enrichGO(MECP2_activated_gene.wholeCell.geneId,
                            OrgDb='org.Mm.eg.db',
                            ont="BP",
                            #universe =unique(mecp2.binding.meth.RNAseqKO_wholeCell$geneId),
                            readable=TRUE )

    formula_res %>% 
      write.table("results/MECP2_RNAseq/All_MECP2_activated_genes_GOBP_terms.tsv",
                  sep = "\t", row.names = FALSE,quote = T)

    formula_res@result %>% filter(p.adjust < 0.05) %>% #View() 
      arrange(p.adjust) %>% 
      slice(1:18) %>%
      ggplot(aes(x=-log10(pvalue),y=reorder(Description,-pvalue)))+
      geom_bar(stat='identity')+theme_test(20)+
      ggtitle('Enriched GO terms for All activated genes')
    ggsave('Plots/All_MECP2_activated_genes_GO_terms.pdf',height = 6,width = 12.2)

    # MBHS activated genes
    MECP2_regulated_gene.wholeCell = Mecp2.Bound.meth.expressed.wholeCell %>% 
      filter(FDR < 0.05) %>% 
      filter(DEG=='Activated') %>% 
      pull(geneId) %>% 
      unique()

    formula_res = enrichGO(MECP2_regulated_gene.wholeCell,
                            OrgDb='org.Mm.eg.db',
                            ont="BP",
                            universe =unique(mecp2.binding.meth.RNAseqKO_wholeCell$geneId),
                            readable=TRUE )

    formula_res %>% 
      write.table("results/MECP2_RNAseq/MBHs_activated_genes_GOBP_terms.tsv",sep = "\t", row.names = FALSE,quote = T)

    formula_res@result %>% filter(p.adjust < 0.05) %>% #View() 
    arrange(p.adjust) %>% 
      slice(1:18) %>%
      ggplot(aes(x=-log10(pvalue),y=reorder(Description,-pvalue)))+
      geom_bar(stat='identity')+theme_test(20)+
      ggtitle('Enriched GO terms for MBHs activated genes')
    ggsave('Plots/MBHs_activated_genes_GO_terms.pdf',height = 6,width = 12.2)





    # 7 or more MBHs regulated genes
    library(clusterProfiler)
    MECP2_regulated_gene.wholeCell = Mecp2.Bound.meth.expressed.wholeCell %>% 
      filter(FDR < 0.05) %>% 
      filter(DEG=='Repressed') %>% 
      dplyr::select(geneId,logFC,FDR) %>% 
      group_by(geneId,logFC,FDR) %>% 
      summarise(Count=dplyr::n()) %>% 
      mutate(MECP2 = case_when(Count <7~'<7 MECP2 peaks',
                               Count >=7~'>=1 MECP2 peaks')) 

    Mecp2.Bound.meth.expressed.wholeCell %>% 
      filter(FDR < 0.05) %>% 
      filter(DEG=='Repressed') %>% 
      dplyr::select(SYMBOL,logFC,FDR) %>% 
      group_by(SYMBOL,logFC,FDR) %>% 
      summarise(Count=dplyr::n()) %>% 
      mutate(MECP2 = case_when(Count <7~'<7 MECP2 peaks',
                               Count >=7~'>=7 MECP2 peaks')) %>% 
      write.table("results/MECP2_RNAseq/7orMore_MBHs_repressed_genes.tsv",sep = "\t",quote = FALSE)

      
    rbind(Mecp2.Bound.meth.expressed.nuclear,Mecp2.UnBound.meth.expressed.nuclear) %>% 
        filter(FDR < 0.05) %>% 
        #filter(!is.na(SYMBOL)) %>% 
        dplyr::select(Gene,logFC, FDR,Binding) %>%
        group_by(Gene,logFC, FDR,Binding) %>% 
        summarise(MECP2_peaks=dplyr::n()) %>% 
        dplyr::mutate(MECP2_peaks = ifelse(Binding == 'Unbound',0,MECP2_peaks)) %>% 
        dplyr::select(1,2,3,5) %>% 
        write.table('results/MECP2/MECP2_repressed_genes_with_numberof_MECP2_peaks.tsv',sep = "\t",
                    row.names = FALSE,quote = FALSE)
        

    MECP2_regulated_gene.nuclear %>% 
      write.table('results/MECP2/MECP2_repressed_genes_having_5_or_morePeaks.tsv',sep = "\t",
                  row.names = FALSE,quote = FALSE)



    MECP2_regulated_gene.wholeCell.list = split(MECP2_regulated_gene.wholeCell$geneId,
                                                MECP2_regulated_gene.wholeCell$MECP2)
    MECP2_regulated_gene.wholeCell.GO  = compareCluster(geneClusters = MECP2_regulated_gene.wholeCell.list,
                                              fun="enrichGO",OrgDb='org.Mm.eg.db',ont="BP",readable=TRUE )

    MECP2_regulated_gene.wholeCell.GO %>% 
      write.table("results/MECP2_RNAseq/7orMore_MBHs_repressed_genes_GOBP_terms.tsv",
                  sep = "\t", row.names = FALSE,quote = T)
    ```

5.  Supplementary Figure 5E-F.

    ```{r,echo=TRUE,eval=FALSE}

    # Load MECP2 bound and unbound target genes with expression change of 
    # MECP2 KOvsWT and CA and CG methylation

    load('results/RData/MECP2_regulatedGenes.RData',verbose = TRUE)
    load('results/RData/MECP2_peakAnnotation.RData',verbose = TRUE)
    load('results/BSMap/8wk_CTX_Stroud2017_mm10_BSmap_CA_within_mm10_ensembl_genes.First3kb_excluded.RData',verbose = T)

    # Read RNA-seq data to extract DNMT3A KOvsWT analysis
    path = "data/Boxer_RNAseq_data.xlsx"
    sheets = openxlsx::getSheetNames(path)

    # print name of all the sheet
    sheets

    # open each sheet by name ans make a list 
    RNAseq.list = lapply(sheets, openxlsx::read.xlsx, xlsxFile=path,startRow=2)

    # name each element of the list
    names(RNAseq.list) = sheets
    names(RNAseq.list)

    # Convert Gene Symbol to ENSEMBL id 
    RNAseq.list = lapply(RNAseq.list, function(x) { mutate(x,ENSEMBL = mapIds(org.Mm.eg.db,
                                                                              keys=x$Gene, 
                                                                              column="ENSEMBL",
                                                                              keytype="SYMBOL",
                                                                              multiVals="first" )) })

    # Filter only significantly changing genes
    mecp2.binding.meth.RNAseqKO_wholeCell.sig = mecp2.binding.meth.RNAseqKO_wholeCell %>% 
      filter(DEG != 'Unchanged') %>%
      filter(Meth_CA == 'CA') %>% 
      dplyr::select(1,20,22,26,30)

    # Merge MECP2 KOvsWT data with DNMT3A KOvsWT 
    MECP2_KOvsWT_DNMT3a_KOvsWT =  merge(mecp2.binding.meth.RNAseqKO_wholeCell.sig, 
                                        RNAseq.list[[7]] %>% filter(FDR < 0.05),by = 'ENSEMBL',all.x=TRUE)
    MECP2_KOvsWT_DNMT3a_KOvsWT =  MECP2_KOvsWT_DNMT3a_KOvsWT %>% 
      mutate(Binding = ifelse(ENSEMBL %in% mecp2.binding$ENSEMBL, 'Bound' , 'Unbound' ))


    MECP2_KOvsWT_DNMT3a_KOvsWT.df = MECP2_KOvsWT_DNMT3a_KOvsWT %>% 
      dplyr::select(1,3,7,2,4) %>% 
      group_by(ENSEMBL,logFC.x,logFC.y,CA_meth,Binding) %>% 
      summarise(Count =dplyr::n()) %>% 
      mutate(Count= ifelse(Count==1 & Binding =='Unbound',0, Count)) %>% 
      ungroup() %>% filter(!is.na(ENSEMBL)) %>% 
      filter(!duplicated(ENSEMBL)) %>% 
      column_to_rownames('ENSEMBL') %>% 
      mutate(logFC.y = ifelse(is.na(logFC.y),0,logFC.y),
             logFC.x = ifelse(is.na(logFC.x),0,logFC.x)) %>%
      mutate(Count = ifelse(Count >=10,10,Count))

    head(ensenbl_location.df_CA_meth)
    colnames(ensenbl_location.df_CA_meth)[9] ="CA_meth"

    MECP2_KOvsWT_DNMT3a_KOvsWT.df=merge(MECP2_KOvsWT_DNMT3a_KOvsWT.df,
                                        y = ensenbl_location.df_CA_meth,
                                        by.x=0,by.y='ENSEMBL',all.x = TRUE) %>% 
      dplyr::select(1,2,3,14,5,6) %>% 
      column_to_rownames('Row.names') %>% 
      mutate(Count = ifelse(is.na(Count),0,Count),
             CA_meth.y = ifelse(is.na(CA_meth.y),0,CA_meth.y)) %>% 
      mutate(mCA = ifelse(CA_meth.y >= median(CA_meth.y),'high mCA' ,'low mCA')) 

    geneClass.list = list()
    geneClass.list[['MECP2_KO (High_mCA)']] = MECP2_KOvsWT_DNMT3a_KOvsWT.df %>% 
      filter(mCA == 'high mCA') %>% filter(logFC.x >0) %>% 
      rownames_to_column() %>% pull(rowname)


    geneClass.list[['MBHs']] = MECP2_KOvsWT_DNMT3a_KOvsWT.df %>% 
      filter(logFC.x >0) %>% 
      filter(Binding == 'Bound' & Count >=7) %>% 
      rownames_to_column() %>% pull(rowname)

    geneClass.list[['DNMT3AKO (High mCA)']] = MECP2_KOvsWT_DNMT3a_KOvsWT.df %>% 
      filter(mCA == 'high mCA') %>% filter(logFC.y >0) %>% 
      rownames_to_column() %>% pull(rowname)

    geneClass.list[['only MBHs']] = setdiff(geneClass.list[[2]],
            intersect(geneClass.list[[1]],geneClass.list[[2]]))

    geneClass.list[['only MECP2KO']] = setdiff(setdiff(geneClass.list[[1]],
                                            intersect(geneClass.list[[1]],geneClass.list[[2]])),
                                                      geneClass.list[[3]])

    names(geneClass.list)


    DEGs_venn = ggvenn(
      geneClass.list[c(1:2)], show_percentage = FALSE,
      fill_color = c("#0073C2FF", "#868686FF"),
      stroke_size = 0.5, set_name_size = 5,text_size = 6
    )
    DEGs_venn
    ggsave('Plots/MECP2_high_mCA_and_MBHs_gene_overlap.pdf',height = 5,width = 5)

    geneClass.list.geneID = lapply(geneClass.list, function(x) {mapIds(org.Mm.eg.db,keys=x, 
                                                                   column="ENTREZID",
                                                                   keytype="ENSEMBL",
                                                                   multiVals="first" ) })
    names(geneClass.list.geneID) = paste0(names(geneClass.list.geneID),' (n=',
                                          lengths(geneClass.list.geneID),')')
    library(clusterProfiler)
    formula_res = compareCluster( geneClass.list.geneID[c(1,4)], 
                                  fun="enrichGO",
                                  OrgDb='org.Mm.eg.db',
                                  ont="BP",
                                  #universe =unique(mecp2.binding.meth.RNAseqKO_wholeCell$geneId),
                                  readable=TRUE )

    library(tidytext)
    formula_res@compareClusterResult %>% dplyr::group_by(Cluster) %>% filter(Cluster != 'MBHs (n=232)') %>%  #filter(p.adjust < 0.05) %>%
      mutate(p.value= -log10(pvalue)) %>% 
      slice(1:10) %>% 
      ggplot()+
      geom_bar(aes(x=p.value,y=reorder_within(Description,p.value,Cluster)), 
               stat = "identity", 
               show.legend = FALSE) +
      facet_wrap(~Cluster,scales = 'free_y')+
      scale_y_reordered()+
      labs(x='-log10(pvalue)')
    ggsave("Plots/GO_terms_MBHs_regulated_genes_high_low_mCA.pdf",height = 4,width = 12)

    ```

6.  Supplementary Figure 8.

    ```{r,echo=TRUE,eval=FALSE}

    dir.create(file.path(paste0(path,"/data/Allen_brain_10X")), showWarnings = FALSE)

    load("results/RData/MECP2_regulatedGenes.RData")

    MECP2_regulated_gene.wholeCell = Mecp2.Bound.meth.expressed.wholeCell %>% 
      filter(FDR < 0.05) %>% 
      filter(DEG=='Repressed') %>% 
      dplyr::select(SYMBOL,logFC,FDR) %>% 
      group_by(SYMBOL,logFC,FDR) %>% 
      summarise(Count=dplyr::n()) %>% 
      filter(Count >= 7)

    download.file("https://idk-etl-prod-download-bucket.s3.amazonaws.com/aibs_mouse_ctx-hpf_10x/trimmed_means.csv", 
                  paste("data/Allen_brain_10X/", "aibs_mouse_ctx-hpf_10x_trimmed_means.csv", sep = ""))

    expr = read.csv("data/Allen_brain_10X/aibs_mouse_ctx-hpf_10x_trimmed_means.csv",
                    check.names = FALSE) %>% 
      filter(feature %in% MECP2_regulated_gene.wholeCell$SYMBOL) %>% 
      column_to_rownames('feature')
    expr = log2(expr+1)
      
      
    #dend_label = unlist(partition_leaves(updated_dendrogram),use.names = FALSE) 
    #dend_label[dend_label %in% colnames(expr) ] %>% length()

    expr_colname = colnames(expr) %>%  as.data.frame() %>% 
      dplyr::rename("group" = 1) %>% 
      mutate(CellType = gsub('.*_','',group)) 

    expr_colname %>% 
      dplyr::select(2) %>% 
      distinct() %>% 
      write.table("data/Allen_brain_10X/Allen_10x_cellType.tsv", sep = "\t", quote = FALSE, row.names = FALSE)

    celltype_anno_1 = read.csv("data/Allen_brain_10X/CellType_Class.tsv",header = TRUE,sep = "\t") #%>% 
    celltype_anno_1$anno = gsub("\\s+[^ ]+$", "",celltype_anno_1$Class.marker)
    head(celltype_anno_1)
    celltype_anno_1$anno = gsub(" ", "_",celltype_anno_1$anno)

    celltype_anno_2 = read.csv("data/Allen_brain_10X/CellType_Class_metadata.tsv",header = TRUE,sep = "\t")
    head(celltype_anno_2)

    metaData1 = merge(expr_colname,celltype_anno_2, by.x = "CellType", by.y="column_in_exp_file")
    metaData2 = merge(metaData1,celltype_anno_1,by.x="column_in_metadata",by.y="anno") %>% 
      dplyr::select(1,2,3,5) %>% distinct() %>%
      arrange(Class)

    expr = expr %>% dplyr::select(metaData2$group)
      

    ha = HeatmapAnnotation(Cell_type=metaData2[,4],
                           #col = list(NEURONAL.NON.NEURONAL =c("GABAergic Neuron" = "red", "Glutamatergic Neuron"="blue","Neuronal"="cyan",
                            #                                   "Non-Neuronal"="green")),
                           annotation_height = unit(c(0.5, 0.5), "cm"),
                           show_annotation_name = TRUE,
                           annotation_name_offset = unit(2, "mm"),
                           annotation_name_rot = c(0, 0),
                           annotation_name_align = TRUE)

    pdf("Plots/Allen_10x_mouse_MBH_repressed_genes.pdf",height = 7,width = 10)
    Heatmap(expr, name = "log2(CPM +1)",
            cluster_rows = TRUE, cluster_columns = FALSE,top_annotation = ha,
            show_column_names = FALSE,show_row_names = FALSE)
    dev.off()

    ```

7.  Supplementary Figure 9A.

    ```{r,echo=TRUE,eval=FALSE}

    hic_mecp2_overlap = read.csv("results/HiC/Jiang_2017.Neuron.mm10.peakachu-merged.loops_closest_MECP2.bed",sep = "\t",header = F) %>% 
      mutate(id = paste0(V5,'_',V6,'_',V7)) %>%
      group_by(id) %>% 
      summarise(count= dplyr::n()) %>% arrange(desc(count)) %>% 
      group_by(count) %>% 
      summarise(n = dplyr::n()) 

    hic_mecp2_overlap[12,2] = hic_mecp2_overlap[12,1]
    hic_mecp2_overlap[12,1] = 0

    hic_mecp2_overlap.pie = hic_mecp2_overlap %>% 
      mutate(count_1 = ifelse(count >=5, ">=5",count)) %>% 
      group_by(count_1) %>% summarise(Total = sum(n)) %>%   
      mutate(Percent = round(Total/sum(Total)*100,3)) %>%
      mutate(count_1 = factor(count_1,levels= as.character(c(0:4,">=5"))))

    nb.cols <- 12
    mycolors <- colorRampPalette(brewer.pal(8, "Set2"))(nb.cols)
    mycolors = c('#71CAF7',mycolors)
    threshold = 0.05
    hic_mecp2_overlap.pie %>% 
      #mutate(Peaks =as.character(Peaks)) %>% 
      ggplot(aes(x = "", y = Percent, fill = count_1)) +
      geom_bar(width = 1, stat = "identity", color = "white") +
      coord_polar("y", start = 0)+
      #geom_text(aes(y = lab.ypos, label = Percent), color = "white")+
      #geom_text(aes(x = 1.6, label = scales::percent(Percent, accuracy = 0.1)), position = position_stack(vjust = .5)) +
      geom_text(aes(x = 1.55, label = scales::percent(Percent, accuracy = 0.1,scale = 1)), position = position_stack(vjust = .5),size=3) +
      #geom_segment(aes(x = ifelse(Percent<threshold,1, xpos), xend = xpos, y = ypos, yend = ypos)) + 
      #geom_text(aes(x = xpos, y = ypos, label = ifelse(Percent>threshold,percent(Percent, accuracy = 0.1),"")), hjust = "outward", nudge_x  = 0.2, size = 4) + 
      #geom_text_repel(aes(x = xpos, y = ypos, label = ifelse(Percent<threshold, percent(Percent, accuracy = 0.1), "")), nudge_x  = 0.2, size = 4)+ 
      coord_polar("y") +
      theme_void()+
      theme(legend.title = element_text(size=10),
            #legend.key.size = unit(2, 'cm'),
            legend.text = element_text(size=10),
            strip.background = element_rect(fill = "#FFF5DE",  color = "transparent"))+
      scale_fill_manual(name = 'Number of MBHs\n within chromatin loops',values = mycolors)
    ggsave("Plots/Number_of_MBHs_within_chromatinLoops.pdf",height = 15, width = 10)

    ```

8.  Supplementary Figure 9B.

    ```{r,echo=TRUE,eval=FALSE}

    hic = c("chromatin_loops" = "data/mm10_hic_northwerstern_YueLab/Jiang_2017.Neuron.mm10.peakachu-merged.loops_pm10kb.sort.bed",
        "H3K27ac" = "results/H3K27ac/H3K27ac_MECP2WT_filtered_peaks.bed")
    hic.GR = GRangesList(lapply(hic, readPeakFile))


    pn.area = 100
    pn.dist = 100
    pn.jacc = 100

    hic.GR.test = mclapply(hic.GR,mc.cores = 45,function(x){
      GenometriCorrelation(x, MECP2_peaks.GR, chromosomes.length = chrLen.vec,
                           permut.number = 0, keep.distributions = TRUE, 
                           showProgressBar = TRUE,awhole.only=TRUE,
                           ecdf.area.permut.number = pn.area,
                           mean.distance.permut.number = pn.dist,
                           jaccard.measure.permut.number = pn.jacc)
    })


    graphical.report(hic.GR.test[[1]],
                     pdffile = paste0("results/ENCODE/ENCODE_MECP2_overlap_GenometricCorr_",
                                      names(hic.GR.test)[1],".pdf"), 
                     show.all = TRUE)

    graphical.report(hic.GR.test[[2]],
                     pdffile = paste0("results/ENCODE/ENCODE_MECP2_overlap_GenometricCorr_",
                                      names(hic.GR.test)[2],".pdf"), 
                     show.all = TRUE)

    hic.GR.mecp2_overlap = list()
    for (i in 1:length(hic.GR.test)){
      test1 = unlist(hic.GR.test[[i]]$awhole)
      hic.GR.mecp2_overlap[[names(hic.GR.test)[i]]] = test1 %>% as.data.frame() %>% 
        rownames_to_column('param') %>% 
        filter(!(grepl(".data|null",param))) 
      colnames(hic.GR.mecp2_overlap[[i]])[2] = "value"
    }

    jaccard = rbindlist(hic.GR.mecp2_overlap,idcol = "Group") %>% 
      dcast(Group~param,value.var = "value") %>% 
      dplyr::select(1,3,5)

    #jaccard = jaccard %>% column_to_rownames('Group') %>% t()
    jaccard_index = jaccard %>% column_to_rownames('Group') %>% as.data.frame() %>% 
      dplyr::select(1) %>% t()
    rownames(jaccard_index) = "MBHs"
    jaccard_index =  as.data.frame(jaccard_index) %>% mutate_if(is.character, as.numeric)

    pdf("Plots/ENCODE_dataOverlap_with_MECP2_HiC_JiangLoop.pdf",height = 2,width = 3)
    draw(Heatmap(jaccard_index,name = "Jaccard measure",
                 #col= colorRamp2(c(0,0.06),c('blue',"red")),
                 #heatmap_legend_param=list(at=c(0,5,10,15,20),color_bar="continuous", 
                 #                           legend_direction="horizontal", legend_width=unit(5,"cm"),
                 #                          title_position="topcenter", title_gp=gpar(fontsize=10, fontface="bold")),
                 cluster_columns = FALSE,
                 cluster_rows = TRUE,
                 rect_gp = gpar(col = "black"),
                 column_names_side = "top",
                 column_names_rot = 30,
                 column_names_gp = gpar(fontsize = 8),
                 row_names_gp = gpar(fontsize = 8)),
         #cell_fun = function(j, i, x, y, width, height, fill) {
         #  grid.text(jaccard_direction[i, j], x, y, gp = gpar(fontsize = 12))},
         heatmap_legend_side="right")
    dev.off()

    ```

### 
